{"pages":[{"title":"","text":"Welcome I can’t remember which version the blog is ,Giving up halfway is so annoyiny. Welcome to the world of Cool Guy！！Eventually I decide to record my daily life!! This time the man gives up half way is a dog About the blog Name is “Flipped”, oh I love the word. Domain is named after the first letter of the Kana”ShikanoYuta”(Thinking of a name is so hard). However, I now find that the domain is strange and hard to remember isn’t it. Anyway—— Here comes the wonderful life of Cool Guy! Included but not limited： recode some articles of great shot Write primary school composition in Japanese A few source code Daily negativity Local Download Wait for exploring About Cool Guy To err is human, to forgive, divine. Actually, the Kanji of ShikanoYuta is “鹿野佑太”👍（But I have forgotten cuz long time no use. Really COOL AND HANDSOME Came from a distant Unknown Planet QQ:2635313260 Weibo:@_文藝青年 Github、Twtter and Facebook are in the Side Bar√ To resolve the server in China mainland, I have to put it on records, but I haven’t grown into 18 years old, hence only using Github Pages. While I don’t know whether it is stable. (Is there a single person that visit my website except me?) This article is also available in 中文, 日本語.","link":"/about/index-English.html"},{"title":"","text":"关于—— 这是不知道第几个版本的Blog了，我 恨 烂 尾。 欢迎来到花花酷盖的世界！！终于又决定要记录生活了吗！！ 这次谁再烂尾谁是狗 关于Blog 名字的话用了很喜欢的Flipped，我 爱 怦 然 心 动 域名是根据ShikanoYuta每个假名首字母得来的（因为真的好难想名字啊） 但是现在发现这域名好奇怪而且还不好记（？ 不管了—— 话说回来，这里被用来记录酷盖的滋润生活！ 包括但不限于： 码了亿点点大佬的文章 用日语写小学作文 关于一点点菜鸡的源码 日常负能 用作本地下载 待开发 关于酷盖 宽和慈善，不杵于物，进退沉浮，自得而已。 其实ShikanoYuta的汉字是鹿野佑太👍（虽然太久没用自己都忘了 真的很酷 还帅 来自一颗遥远的未知行星 QQ:2635313260 微博:@_文藝青年 Github、Twtter和Facebook的话在侧边栏有√ 还有就是因为国内的服务器域名解析需要备案，我居然还没满18岁（泪），所以只能用GithubPages了，也不知道访问速度咋样，可能 经常 打不开（但是除了我真的会有人打开吗） 本文同时提供以下语言的翻译: 日本語、 English。","link":"/about/index.html"},{"title":"","text":"ようこそへ こちらは何バージョンのブログが覚えない、中途に諦めることが大変。 かっこい世界にいらっしゃいませ！！やっとまだ生活を記録することを決めましたか！ 今回、誰が中途に諦めたら、誰が犬だ ブログについて 名前なら、大好きな「Flipped」を使って。 ドメインは鹿野祐太の仮名の頭字を取り組みきたと言う名前でーす でも、今このドメインはおかしくて覚えにくいと見つけた（涙） なんとしてもー こちらがイケメンの充実な生活を聞き取ることっていうか 含むけど、限らないオプション： アニギの文章を記録 日本語で小学校の作文を写す ちっと弱いソースコードを記録 日常消極気持ちを発散 ダウンロードサイトになって 開発に待ち イケメンについて 花が咲き、花が散る、繰り返しの繰り返し、生きながらえてきたが、今昔は昨日ではない。 実はShikanoYutaの漢字が鹿野佑太👍（長すぎ使わずから自分が忘れちゃったけれども ホントウクール 並びにかっこいい ある遠い未知な星から来ていました QQ:2635313260 Weibo:@_文藝青年 Github、TwtterやFacebookならサイトバーにあるよ√ 国内のサーバならドメインが解析したら、控えってことが必要ですけど、十八歳がまだ未満（涙）、ですからGithubPagesをしか使いません，訪問速度はどうかまだ知らないし，時々開けないだと考えて。（でも僕しか他の人は開くことの可能性があるのか） この文章も 中文、 Englishで可用です。","link":"/about/index-Japanese.html"}],"posts":[{"title":"Markdown语法","text":"码了一点点的Markdown的语法 一、标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。 示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 二、字体 加粗 要加粗的文字左右分别用两个*号包起来 斜体 要倾斜的文字左右分别用一个*号包起来 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 删除线 要加删除线的文字左右分别用两个~~号包起来 示例： 1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下： 这是加粗的文字这是倾斜的文字这是斜体加粗的文字\\这是加删除线的文字 三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt; n个…貌似可以一直加下去，但没神马卵用 示例： 123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 效果如下： 这是引用的内容 这是引用的内容 这是引用的内容 四、分割线三个或者三个以上的 - 或者 * 都可以。 示例： 1234-------******** 效果如下：可以看到，显示效果是一样的。 五、图片语法： 1234![图片alt](图片地址 ''图片title'')图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 示例： 12![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;) 效果如下： img blockchain 上传本地图片直接点击导航栏的图片标志，选择图片即可 markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。markdown图床 六、超链接语法： 12[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加 示例： 12[简书](http://jianshu.com)[百度](http://baidu.com) 效果如下： 简书百度 注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。 1234&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt; 七、列表无序列表语法：无序列表用 - + * 任何一种都可以 12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 效果如下： 列表内容 列表内容 列表内容 有序列表语法：数字加点 123451. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格 效果如下： 列表内容 列表内容 列表内容 列表嵌套上一级和下一级之间敲三个空格即可 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级无序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 一级有序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级有序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 八、表格语法： 1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 示例： 12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 效果如下： 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 九、代码语法：单行代码：代码之间分别用一个反引号包起来 1`代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 12345(```) 代码... 代码... 代码...(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 示例： 单行代码 1`create database hero;` 代码块 123456(```) function fun(){ echo &quot;这是一句非常牛逼的代码&quot;; } fun();(```) 效果如下： 单行代码 1create database hero; 代码块 1234function fun(){ echo &quot;这是一句非常牛逼的代码&quot;;}fun(); 十、本地下载语法 1[下载内容](/download/文件名) 作者：高鸿祥链接：https://www.jianshu.com/p/191d1e21f7ed来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","link":"/%E7%BD%91%E9%A1%B5/Markdown%E8%AF%AD%E6%B3%95/"},{"title":"頭に突然込んだまま造語","text":"造語（ぞうご）は、新たに語（単語）を造ることや、既存の語を組み合わせて新たな意味の語を造ること、また、そうして造られた語である。新たに造られた語については、新語または新造語とも呼ばれる。 ​ 昔からいつもこの企画があるんけど、自分の言語を作ろうと思い、最近から真面目にやろうということを決めました。まっ始まるときから一大問題があって、それが読み方や書き方またはアルファベットを確定すること。自分が外で「フランス語を勉強しているよ、すごくわかっちゃったよねー」という、実は全然そんなことがないである。まだ、ゲルマン語系の発音や文字を選んだ、（興味あるから）。そして、IPA（って国際音標表）を調べて勉強し始めた。発音がヤッパリむずかしいね。特にたくさんの音標の発音が似てる。 て、「大舌音」と言うおとが出来ない、「小舌音」は一生懸命に勉強するあとで、成功したのに。サスガ俺！！！！！諦めぬ！それが一つだけ今回の冬休みの要望だろうね。じゃー、頑張ろ！！！ 2020/2/11に更新：諦めてしまいました","link":"/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E9%80%A0%E8%AF%AD/"},{"title":"My Planet-MainViewController","text":"首页主要实现功能： 判断用户是否联网 完成通知中心Configuration “New Message”字样闪烁 四个跳转UIButton LocationManager初始化（为Weather做准备） 实现Tapic/Hapic震动反馈 全局部分 引入： UIKit SnapKit（约束） CoreLocation（定位） UserNotification（通知中心） AudioToolBox.AudioServices（震动反馈） 12345import UIKitimport SnapKitimport CoreLocationimport UserNotificationsimport AudioToolbox.AudioServices 全局变量、常量声明： Latitude（纬度） Longitude（经度） LongtitudePlusLatitude（经度+纬度） Swidth（屏幕宽度） Sheight（屏幕长度） 123456var latitude = 0.0var longitude = 0.0var longtitudePlusLatitude:NSString? = &quot;nil&quot;let Swidth = UIScreen.main.bounds.widthlet Sheight = UIScreen.main.bounds.height 闭包导入： 用于判断联网情况 123456789101112131415161718192021func requestUrl(urlString: String) -&gt; Bool { let url: NSURL = NSURL(string: urlString)! let request: NSMutableURLRequest = NSMutableURLRequest(url: url as URL) request.timeoutInterval = 5 var response: URLResponse? do { try NSURLConnection.sendSynchronousRequest(request as URLRequest, returning: &amp;response) if let httpResponse = response as? HTTPURLResponse { if httpResponse.statusCode == 200 { return true } } return false } catch (let error) { print(&quot;error:\\(error)&quot;) return false }} 判断软件版本（iOS10及以上） 1@available(iOS 10.0, *) UIViewController类 变量、常量声明： locationManager（用于定位） timer naviImage（图片） UIButton bgView（背景图片） UITapGestureRecognizer 1234567891011var locationManager:CLLocationManager! var timer:Timer! var timer2:Timer! let naviImage = UIImageView() let nav1 = UIButton(type: UIButton.ButtonType.custom) let nav2 = UIButton(type: UIButton.ButtonType.custom) let nav3 = UIButton(type: UIButton.ButtonType.custom) let nav4 = UIButton(type: UIButton.ButtonType.custom) let bgView = UIImageView() let bg = UIImage(named: &quot;bg&quot;)?.resizableImage(withCapInsets: UIEdgeInsets(top: 60, left: 15, bottom: 55, right: 15), resizingMode: .stretch) var Tap = UITapGestureRecognizer() 复写viewDidLoad闭包： 生效通知 定位服务配置 遍历图片保证背景循环播放 timer配置 增加约束 增加UIbutton单击事件 设置UIButton属性 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778 notification() everyDayNotification() locationManager = CLLocationManager() locationManager.delegate = self locationManager.desiredAccuracy = kCLLocationAccuracyBest locationManager.distanceFilter = 10.0 locationManager.startUpdatingLocation() if (CLLocationManager.authorizationStatus() == CLAuthorizationStatus.notDetermined){ locationManager?.requestWhenInUseAuthorization() } var background = [UIImage]() for i in 1 ... 4 { background.append(UIImage(named: &quot;bg\\(i)&quot;)!) } let imageView = UIImageView() imageView.animationImages = background imageView.animationDuration = 5 imageView.animationRepeatCount = 0 imageView.startAnimating() self.view.addSubview(imageView) imageView.snp.makeConstraints {(bg) in bg.top.bottom.left.right.equalTo(0) bg.center.equalToSuperview() } timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(self.disappear), userInfo: nil, repeats: true) timer2 = Timer.scheduledTimer(timeInterval: 2, target: self, selector: #selector(self.appear), userInfo: nil, repeats: true) super.viewDidLoad() naviImage.image = UIImage(named: &quot;navi&quot;) bgView.image = bg self.view.addSubview(bgView) bgView.snp.makeConstraints {(bg) in bg.center.equalToSuperview() bg.height.equalTo(100) bg.left.equalTo(0).offset(35) bg.right.equalTo(0).offset(-35) } self.view.addSubview(naviImage) naviImage.snp.makeConstraints {(make) in make.width.equalTo(210) make.height.equalTo(20) make.center.equalToSuperview() } Tap = UITapGestureRecognizer(target: self, action: #selector(self.animateAction(_:))) Tap.numberOfTapsRequired = 1 Tap.numberOfTouchesRequired = 1 self.view.addGestureRecognizer(Tap) nav1.addTarget(self, action: #selector(navi1), for: .touchUpInside) nav2.addTarget(self, action: #selector(navi2), for: .touchUpInside) nav3.addTarget(self, action: #selector(navi3), for: .touchUpInside) nav3.addTarget(self, action: #selector(navi3), for: .touchUpInside) nav4.addTarget(self, action: #selector(navi4), for: .touchUpInside) nav1.backgroundColor = UIColor.clear nav1.setTitle(&quot;看看信箱！&quot;, for: UIControl.State()) nav1.setTitleColor(UIColor.white, for: UIControl.State()) nav1.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30) nav2.backgroundColor = UIColor.clear nav2.setTitle(&quot;看看天气。&quot;, for: UIControl.State()) nav2.setTitleColor(UIColor.white, for: UIControl.State()) nav2.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30) nav3.backgroundColor = UIColor.clear nav3.setTitle(&quot;听一首歌。&quot;, for: UIControl.State()) nav3.setTitleColor(UIColor.white, for: UIControl.State()) nav3.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30) nav4.backgroundColor = UIColor.clear nav4.setTitle(&quot;看看运势！&quot;, for: UIControl.State()) nav4.setTitleColor(UIColor.white, for: UIControl.State()) nav4.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30) 增加UIView动画，实现壁纸循环播放 12345678910@objc func disappear() { UIView.animate(withDuration: 0.5, animations: { self.naviImage.alpha = 0 })}@objc func appear() { UIView.animate(withDuration: 0.5, animations: { self.naviImage.alpha = 1 })} 通知及每日通知配置 1234567891011121314151617181920212223242526272829303132func notification() { let content = UNMutableNotificationContent() content.sound = UNNotificationSound.default content.body = NSString.localizedUserNotificationString(forKey: &quot;您回到了地球&quot;, arguments: nil) let infoDic = NSDictionary(object: &quot;message.&quot;, forKey: &quot;infoKey&quot; as NSCopying) content.userInfo = infoDic as [NSObject : AnyObject] let trigger = UNTimeIntervalNotificationTrigger.init(timeInterval: 5.0, repeats: false) let request = UNNotificationRequest.init(identifier: &quot;FiveSecond&quot;, content: content, trigger: trigger) let center = UNUserNotificationCenter.current() center.add(request) } func everyDayNotification() { let content = UNMutableNotificationContent() content.sound = UNNotificationSound.default content.body = NSString.localizedUserNotificationString(forKey: &quot;来看看今天的天气和运势吧!&quot;, arguments: nil) var compoents:DateComponents = DateComponents() compoents.hour = 9 let infoDic = NSDictionary(object: &quot;message.&quot;, forKey: &quot;infoKey&quot; as NSCopying) content.userInfo = infoDic as [NSObject : AnyObject] let trigger = UNCalendarNotificationTrigger.init(dateMatching: compoents, repeats: true) let request = UNNotificationRequest.init(identifier: &quot;FiveSecond&quot;, content: content, trigger: trigger) let center = UNUserNotificationCenter.current() center.add(request) } 定位服务配置 12345678func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) { let location:CLLocation = locations[0] latitude = location.coordinate.latitude longitude = location.coordinate.longitude longtitudePlusLatitude = (&quot;\\(NSString(string: String(longitude))),\\(NSString(string: String(latitude)))&quot;) as NSString UserDefaults().setValue(longtitudePlusLatitude, forKey: &quot;info&quot;) locationManager.stopUpdatingLocation()} UIButton单击事件： timer失效（背景停止刷新） 增加震动反馈（AudioServicesPlaySystemSound） 将四个子UIButton添加到视图 添加UIButton约束 123456789101112131415161718192021222324252627282930313233343536373839404142timer.invalidate()timer2.invalidate()let soundID = SystemSoundID(1519)AudioServicesPlaySystemSound(soundID)naviImage.removeFromSuperview()Tap.removeTarget(self, action: #selector(self.animateAction(_:)))nav1.alpha = 0nav2.alpha = 0nav3.alpha = 0nav4.alpha = 0self.view.addSubview(nav1)self.view.addSubview(nav2)self.view.addSubview(nav3)self.view.addSubview(nav4)UIView.animate(withDuration: 0.6) { self.bgView.alpha = 0 self.nav1.alpha = 1 self.nav2.alpha = 1 self.nav3.alpha = 1 self.nav4.alpha = 1} nav1.snp.makeConstraints {(nav1) in nav1.centerY.equalToSuperview().offset(-80) nav1.centerX.equalToSuperview()}nav2.snp.makeConstraints {(nav2) in nav2.centerY.equalToSuperview().offset(-40) nav2.centerX.equalToSuperview()}nav3.snp.makeConstraints {(nav3) in nav3.centerY.equalToSuperview() nav3.centerX.equalToSuperview()}nav4.snp.makeConstraints {(nav4) in nav4.centerY.equalToSuperview().offset(40) nav4.centerX.equalToSuperview()} 增加子UIButton单击事件： 震动反馈 跳转子页面 部分页面验证是否联网，网络不通则跳转至Error-Controller 1234567891011121314151617181920212223242526272829303132333435363738@objc func navi1(_ sender: UIButton) { let soundID = SystemSoundID(1519) AudioServicesPlaySystemSound(soundID) let mail = MailViewController() self.present(mail, animated: true, completion: nil) } @objc func navi2(_ sender: UIButton) { let soundID = SystemSoundID(1519) AudioServicesPlaySystemSound(soundID) let networkStatus = requestUrl(urlString: &quot;https://www.baidu.com&quot;) if networkStatus == false { let fal = NetworkErrorWeatherViewController() self.present(fal, animated: true, completion: nil) } else { let weather = WeatherViewController() self.present(weather, animated: true, completion: nil) } } @objc func navi3(_ sender: UIButton) { let soundID = SystemSoundID(1519) AudioServicesPlaySystemSound(soundID) let music = MusicViewController() self.present(music, animated: true, completion: nil) } @objc func navi4(_ sender: UIButton) { let soundID = SystemSoundID(1519) AudioServicesPlaySystemSound(soundID) let networkStatus = requestUrl(urlString: &quot;https://www.baidu.com&quot;) if networkStatus == false { let fal = NetworkErrorFateViewController() self.present(fal, animated: true, completion: nil) } else { let fate = FateViewController() self.present(fate, animated: true, completion: nil) } } 原文件","link":"/iOS/Main/"},{"title":"My Planet-MailViewController","text":"Mail页主要实现功能： 单字逐秒显示 简单交互 返回首页 全局部分 引入： UIKit SnapKit MessageUI 123import UIKitimport SnapKitimport MessageUI UIViewController类 变量、常量声明： 显示的字符串 UILabel 遍历次数 UIButton 1234var str = &quot;2020年7月29日 星期三 \\n...\\n这将会是My Planet的最后一个版本\\n终究是烂尾了\\nAnyway...\\n晚安...&quot; let text = UILabel() var i = 1 let returnHomeBtn = UIButton(type: UIButton.ButtonType.roundedRect) 复写viewDidLoad闭包： timer配置 UIButton配置 背景图片遍历 UILabel配置、添加约束 12345678910111213141516171819202122232425262728293031323334let timer:Timer!timer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(MailViewController.wordPrint(_:)), userInfo: nil, repeats: true)returnHomeBtn.backgroundColor = UIColor.clearreturnHomeBtn.setTitle(&quot;返回主页&quot;, for: .normal)returnHomeBtn.setTitleColor(UIColor.white, for: UIControl.State())returnHomeBtn.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30)returnHomeBtn.addTarget(self, action: #selector(self.returnHome(_:)), for: UIControl.Event.touchUpInside)var background = [UIImage]() for i in 1 ... 4 { background.append(UIImage(named: &quot;bg\\(i)&quot;)!) }let imageView = UIImageView()imageView.animationImages = backgroundimageView.animationDuration = 5imageView.animationRepeatCount = 0imageView.startAnimating()self.view.addSubview(imageView) imageView.snp.makeConstraints {(bg) in bg.top.bottom.left.right.equalTo(0) bg.center.equalToSuperview()} text.backgroundColor = UIColor.clearself.view.addSubview(text)text.textColor = UIColor.whitetext.lineBreakMode = NSLineBreakMode.byWordWrappingtext.numberOfLines = 0text.snp.makeConstraints {(text) in text.width.equalTo(300) text.center.equalToSuperview()} timer配置 1234567891011121314151617if i &lt;= str.count{let output = str.prefix(i) let paraph = NSMutableParagraphStyle() paraph.lineSpacing = 15 let attributes = [NSAttributedString.Key.font: UIFont(name: &quot;Zpix&quot;, size: 22), NSAttributedString.Key.paragraphStyle: paraph] text.attributedText = NSAttributedString(string: String(output), attributes: attributes)i+=1}else{ timer.invalidate() self.view.addSubview(returnHomeBtn) returnHomeBtn.snp.makeConstraints {(btn) in btn.centerX.equalToSuperview() btn.centerY.equalTo(text).offset(150) }} 返回主界面按钮 123@objc func returnHome(_ btn: UIButton) { self.dismiss(animated: true, completion: nil)} 原文件","link":"/iOS/Mail/"},{"title":"My Planet-FateViewController","text":"Fate页主要实现功能： 用户输入星座 返回当日运势 打字机输出 返回首页 API源：聚合API 全局部分 引入: UIKit SwiftyJSON 12import UIKitimport SwiftyJSON 全局变量、常量声明： timer UILabel UITextField（监测用户输入） 初始字符串str 遍历次数 JSON字典 12345678910var timer:Timer!var timer2:Timer!let preTextLabel = UILabel()let TextField = UITextField()let consLabel = UILabel()let str = &quot;你的星座是:&quot;var i = 0var times = 0var cons = &quot;nil&quot;var info:Dictionary&lt;String,JSON&gt; = [&quot;name&quot;:JSON(&quot;nil&quot;), &quot;datetime&quot;:JSON(&quot;nil&quot;), &quot;all&quot;:JSON(&quot;nil&quot;), &quot;color&quot;:JSON(&quot;nil&quot;), &quot;health&quot;:JSON(&quot;nil&quot;), &quot;love&quot;:JSON(&quot;nil&quot;), &quot;money&quot;:JSON(&quot;nil&quot;), &quot;number&quot;:JSON(&quot;nil&quot;), &quot;QFriend&quot;:JSON(&quot;nil&quot;), &quot;summary&quot;:JSON(&quot;nil&quot;), &quot;work&quot;:JSON(&quot;nil&quot;)] UIViewController类 返回首页 1self.dismiss(animated: true, completion: nil) timer配置（打字机） 12345678910111213141516171819202122232425262728 preTextLabel.backgroundColor = UIColor.clear self.view.addSubview(preTextLabel) preTextLabel.textColor = UIColor.white preTextLabel.font = UIFont(name: &quot;Zpix&quot;, size: 20) preTextLabel.lineBreakMode = NSLineBreakMode.byWordWrapping preTextLabel.numberOfLines = 0 preTextLabel.snp.makeConstraints {(preTextLabel) in preTextLabel.width.equalTo(300) preTextLabel.centerX.equalToSuperview().offset(-25) preTextLabel.centerY.equalToSuperview().offset(-50) } if i &lt;= 8{ let output = str.prefix(i) preTextLabel.text = String(output) i+=1}else { timer.invalidate()}if i == 8{ self.view.addSubview(TextField) TextField.snp.makeConstraints {(textField) in textField.width.equalTo(100) textField.centerY.equalTo(preTextLabel) textField.centerX.equalTo(preTextLabel).offset(25) }} TextField代理、URL会话配置及访问、防呆、分析返回数据 123456789101112131415161718192021222324252627TextField.resignFirstResponder()cons = TextField.text!if cons == &quot;水瓶&quot; || cons == &quot;双鱼&quot; || cons == &quot;白羊&quot; || cons == &quot;金牛&quot; || cons == &quot;双子&quot; || cons == &quot;巨蟹&quot; || cons == &quot;狮子&quot; || cons == &quot;处女&quot; || cons == &quot;天秤&quot; || cons == &quot;天蝎&quot; || cons == &quot;射手&quot; || cons == &quot;摩羯&quot; { cons = cons + &quot;座&quot;}let urlString = &quot;http://web.juhe.cn:8080/constellation/getAll?key=b9e394f24f7890c24b19db0ef6b44c00&amp;type=today&amp;consName=\\(cons)&quot;let urlStr = urlString.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)let config = URLSessionConfiguration.defaultlet url = URL(string: urlStr!)let session = URLSession(configuration: config)let task = session.dataTask(with: url!) {(data, response, error) in let json = try! JSON(data: data!) info[&quot;name&quot;] = json[&quot;name&quot;] info[&quot;datetime&quot;] = json[&quot;datetime&quot;] info[&quot;all&quot;] = json[&quot;all&quot;] info[&quot;color&quot;] = json[&quot;color&quot;] info[&quot;health&quot;] = json[&quot;health&quot;] info[&quot;love&quot;] = json[&quot;love&quot;] info[&quot;money&quot;] = json[&quot;money&quot;] info[&quot;number&quot;] = json[&quot;number&quot;] info[&quot;QFriend&quot;] = json[&quot;QFriend&quot;] info[&quot;summary&quot;] = json[&quot;summary&quot;] info[&quot;work&quot;] = json[&quot;work&quot;] i = 100}task.resume()return true 复写viewDidLoad： timer配置 textField配合 背景图片遍历 123456789101112131415161718192021222324timer = Timer.scheduledTimer(timeInterval: 0.35, target: self, selector: #selector(FateViewController.preTextPrint(_:)), userInfo: nil, repeats: true)timer2 = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(FateViewController.consPrint(_:)), userInfo: nil, repeats: true)TextField.borderStyle = UITextField.BorderStyle.roundedRectTextField.textAlignment = NSTextAlignment.centerTextField.backgroundColor = UIColor.clearTextField.returnKeyType = UIReturnKeyType.doneTextField.delegate = selfTextField.textColor = UIColor.whiteTextField.font = UIFont(name: &quot;Zpix&quot;, size: 20)var background = [UIImage]() for i in 1 ... 4 { background.append(UIImage(named: &quot;bg\\(i)&quot;)!) } let imageView = UIImageView() imageView.animationImages = background imageView.animationDuration = 5 imageView.animationRepeatCount = 0 imageView.startAnimating() self.view.addSubview(imageView) imageView.snp.makeConstraints {(bg) in bg.top.bottom.left.right.equalTo(0) bg.center.equalToSuperview() } timer配置（打字机）、增加约束 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566consLabel.backgroundColor = UIColor.clear self.view.addSubview(consLabel) consLabel.textColor = UIColor.white consLabel.lineBreakMode = NSLineBreakMode.byWordWrapping consLabel.numberOfLines = 0 consLabel.snp.makeConstraints {(consLabel) in consLabel.width.equalTo(300) consLabel.center.equalToSuperview() } if i == 100 { if cons == &quot;白羊座&quot; || cons == &quot;金牛座&quot; || cons == &quot;双子座&quot; || cons == &quot;巨蟹座&quot; || cons == &quot;狮子座&quot; || cons == &quot;处女座&quot; || cons == &quot;天秤座&quot; || cons == &quot;天蝎座&quot; || cons == &quot;射手座&quot; || cons == &quot;摩羯座&quot; || cons == &quot;水瓶座&quot; || cons == &quot;双鱼座&quot; { let printStr = &quot;\\(info[&quot;datetime&quot;]!.string!)的\\(info[&quot;name&quot;]!.string!)\\n综合指数:\\(info[&quot;all&quot;]!.string!)\\n幸运色:\\(info[&quot;color&quot;]!.string!)\\n健康指数:\\(info[&quot;health&quot;]!.string!)\\n爱情指数:\\(info[&quot;love&quot;]!.string!)\\n财运指数:\\(info[&quot;money&quot;]!.string!)\\n幸运数字:\\(info[&quot;number&quot;]!.int!)\\n速配星座:\\(info[&quot;QFriend&quot;]!.string!)\\n工作指数:\\(info[&quot;work&quot;]!.string!)\\n今日概述:\\(info[&quot;summary&quot;]!.string!)&quot; preTextLabel.text = &quot;&quot; TextField.removeFromSuperview() if times &lt;= printStr.count { let output = printStr.prefix(times) let paraph = NSMutableParagraphStyle() paraph.lineSpacing = 10 let attributes = [NSAttributedString.Key.font: UIFont(name: &quot;Zpix&quot;, size: 22), NSAttributedString.Key.paragraphStyle: paraph] consLabel.attributedText = NSAttributedString(string: String(output), attributes: attributes) times+=1 } else { timer2.invalidate() let Return = UIButton(type: UIButton.ButtonType.roundedRect) let returnImage = UIImage(named: &quot;return&quot;) Return.setBackgroundImage(returnImage, for: .normal) Return.addTarget(self, action: #selector(self.returnHome(_:)), for: UIControl.Event.touchUpInside) self.view.addSubview(Return) Return.snp.makeConstraints {(button) in button.centerX.equalTo(consLabel).offset(150) button.centerY.equalTo(consLabel).offset(320) } } } else { preTextLabel.text = &quot;&quot; TextField.removeFromSuperview() let str = &quot;没有在星座大全中找到\\(cons)\\n检查一下吧&quot; if times &lt;= str.count { let output = str.prefix(times) let paraph = NSMutableParagraphStyle() paraph.lineSpacing = 10 let attributes = [NSAttributedString.Key.font: UIFont(name: &quot;Zpix&quot;, size: 22), NSAttributedString.Key.paragraphStyle: paraph] consLabel.attributedText = NSAttributedString(string: String(output), attributes: attributes) times+=1 } else { timer2.invalidate() let Return = UIButton(type: UIButton.ButtonType.roundedRect) let returnImage = UIImage(named: &quot;return&quot;) Return.setBackgroundImage(returnImage, for: .normal) Return.addTarget(self, action: #selector(self.returnHome(_:)), for: UIControl.Event.touchUpInside) self.view.addSubview(Return) Return.snp.makeConstraints {(button) in button.centerX.equalTo(consLabel).offset(110) button.centerY.equalTo(consLabel).offset(40) } } } } } 原文件","link":"/iOS/Fate/"},{"title":"My Planet-WeatherViewController","text":"Music页主要实现功能： 自动定位 获取当地天气 打字机显示 返回首页 API源：高德API 地名与编号对应文档：点击下载 全局部分 引入： UIKit CoreLocation SwiftyJSON（JSON解决方案） 123import UIKitimport CoreLocationimport SwiftyJSON UIViewController类 变量、常量声明： UILabel UITextField（用于输出文本） API地址 重组字符串 准备文字 timer 现在区域 遍历次数 JSON包 12345678910111213141516let preTextLabel = UILabel()let weatherInfo = UILabel()let textField = UITextField()var warning = 0let tudeToLocation = &quot;https://restapi.amap.com/v3/geocode/regeo?output=JSON&amp;radius=1000&amp;extensions=all&amp;key=14960ff6beb497b9b3976a298a7823d4&amp;location=%@&quot;let weatherUrl = &quot;https://restapi.amap.com/v3/weather/weatherInfo?key=ac27e18866b8b0b3b5270054264a484d&amp;city=%@&quot;let preText = &quot;正在给气象局打电话...&quot;var timer:Timer!var timer2:Timer!var nowDistrict = &quot;nil&quot;var times = 0var info:Dictionary&lt;String,JSON&gt; = [&quot;温度&quot;:JSON(&quot;nil&quot;),&quot;湿度&quot;:JSON(&quot;nil&quot;),&quot;天气&quot;:JSON(&quot;nil&quot;),&quot;风向&quot;:JSON(&quot;nil&quot;),&quot;风力&quot;:JSON(&quot;nil&quot;)] var i = 0 timer配置 12345678910111213141516171819preTextLabel.backgroundColor = UIColor.clear self.view.addSubview(preTextLabel) preTextLabel.textColor = UIColor.white preTextLabel.font = UIFont(name: &quot;Zpix&quot;, size: 20) preTextLabel.lineBreakMode = NSLineBreakMode.byWordWrapping preTextLabel.numberOfLines = 0 preTextLabel.snp.makeConstraints {(preTextLabel) in preTextLabel.width.equalTo(300) preTextLabel.centerX.equalToSuperview().offset(-25) preTextLabel.centerY.equalToSuperview().offset(-50) } if i &lt;= 12{ let output = preText.prefix(i) preTextLabel.text = String(output) i+=1 } else { timer.invalidate() } 复写viewDidLoad 配置timer 配置plist文件路径 配置JSON字典文件转为data 读取plist文件 拼接字符串 配置URL连接 开启URL会话 分析返回数据并按照“温度、湿度、风向、风力、天气”分类并放入字典 设置背景 约束 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061timer = Timer.scheduledTimer(timeInterval: 0.3, target: self, selector: #selector(WeatherViewController.preTextPrint(_:)), userInfo: nil, repeats: true)timer2 = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(WeatherViewController.weatherinfo(_:)), userInfo: nil, repeats: true)let plistPath = Bundle.main.path(forResource: &quot;WeatherNum&quot;, ofType: &quot;plist&quot;)let data = NSMutableDictionary.init(contentsOfFile: plistPath!)!UserDefaults().string(forKey: &quot;info&quot;)let RelongtitudePlusLatitude = longtitudePlusLatitude?.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed) ?? &quot;&quot;let config1 = URLSessionConfiguration.defaultlet url1 = URL(string: String(format: tudeToLocation, RelongtitudePlusLatitude))let request1 = URLRequest(url: url1!)let session1 = URLSession(configuration: config1)let task1 = session1.dataTask(with: request1) { (data1, response, error) in let json1 = try! JSON(data: data1!) self.nowDistrict = json1[&quot;regeocode&quot;][&quot;addressComponent&quot;][&quot;district&quot;].stringValue if self.nowDistrict == &quot;&quot; || self.nowDistrict == &quot;&quot;{ self.warning = 1 let alertController = UIAlertController(title: &quot;没有获取到您的经纬度\\n即将返回星球主页…&quot;, message: nil, preferredStyle: .alert) self.present(alertController, animated: true, completion: nil) DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 4) { self.presentedViewController?.dismiss(animated: false, completion: nil) self.dismiss(animated: true, completion: nil) } } else { let midNum = data[self.nowDistrict]! as! String let districtNum = midNum let weatherUrl = &quot;https://restapi.amap.com/v3/weather/weatherInfo?key=ac27e18866b8b0b3b5270054264a484d&amp;city=\\(districtNum)&quot; let config2 = URLSessionConfiguration.default let url2 = URL(string: String(format: weatherUrl)) let request2 = URLRequest(url: url2!) let session2 = URLSession(configuration: config2) let task2 = session2.dataTask(with: request2) { (data2, response, error) in let json2 = try! JSON(data: data2!) self.info[&quot;温度&quot;] = json2[&quot;lives&quot;][0][&quot;temperature&quot;] self.info[&quot;湿度&quot;] = json2[&quot;lives&quot;][0][&quot;humidity&quot;] self.info[&quot;风向&quot;] = json2[&quot;lives&quot;][0][&quot;winddirection&quot;] self.info[&quot;风力&quot;] = json2[&quot;lives&quot;][0][&quot;windpower&quot;] self.info[&quot;天气&quot;] = json2[&quot;lives&quot;][0][&quot;weather&quot;] } task2.resume()}}task1.resume()var background = [UIImage]() for i in 1 ... 4 { background.append(UIImage(named: &quot;bg\\(i)&quot;)!) }let imageView = UIImageView()imageView.animationImages = backgroundimageView.animationDuration = 5imageView.animationRepeatCount = 0imageView.startAnimating()self.view.addSubview(imageView) imageView.snp.makeConstraints {(bg) in bg.top.bottom.left.right.equalTo(0) bg.center.equalToSuperview()} timer配置（打字机） 1234567891011121314151617181920212223242526272829303132333435363738394041let humidity = info[&quot;湿度&quot;]?.string let temperature = info[&quot;温度&quot;]?.string let winddirection = info[&quot;风向&quot;]?.string let weather = info[&quot;天气&quot;]?.string let windpower = info[&quot;风力&quot;]?.string let weatherString = &quot;\\(nowDistrict)现在的天气是:\\n温度:\\(temperature!)℃！\\n湿度:\\(humidity!)%！\\n天气状况:\\(weather!)！\\n风力:\\(windpower!)！\\n风向:\\(winddirection!)！\\n报告完毕！&quot; weatherInfo.backgroundColor = UIColor.clear self.view.addSubview(weatherInfo) weatherInfo.textColor = UIColor.white weatherInfo.lineBreakMode = NSLineBreakMode.byWordWrapping weatherInfo.numberOfLines = 0 weatherInfo.snp.makeConstraints {(weatherInfo) in weatherInfo.center.equalToSuperview() } if warning == 1{ weatherInfo.removeFromSuperview() } if i==13 { preTextLabel.text = &quot;&quot; if times &lt;= weatherString.count{ let output = weatherString.prefix(times) let paraph = NSMutableParagraphStyle() paraph.lineSpacing = 10 let attributes = [NSAttributedString.Key.font: UIFont(name: &quot;Zpix&quot;, size: 22),NSAttributedString.Key.paragraphStyle: paraph] weatherInfo.attributedText = NSAttributedString(string: String(output), attributes: attributes as [NSAttributedString.Key : Any]) times+=1 } else { timer2.invalidate() let Return = UIButton(type: UIButton.ButtonType.roundedRect) let returnImage = UIImage(named: &quot;return&quot;) Return.setBackgroundImage(returnImage, for: .normal) Return.addTarget(self, action: #selector(self.returnHome(_:)), for: UIControl.Event.touchUpInside) self.view.addSubview(Return) Return.snp.makeConstraints {(button) in button.centerX.equalTo(weatherInfo).offset(100) button.centerY.equalTo(weatherInfo).offset(120) } } } 返回首页 123@objc func returnHome(_ button: UIButton) { self.dismiss(animated: true, completion: nil)} 原文件","link":"/iOS/Weather/"},{"title":"My Planet-MusicViewController","text":"Music页主要实现功能： 在线播放流媒体 简单交互 RemoteController交互 返回首页 全局部分 引入： UIKit SnapKit AVFoundation（音频处理） MediaPlayer（音频处理） 开源StreamingKit流媒体处理包（swift与oc混编）文件下载 1234import UIKitimport SnapKitimport AVFoundationimport MediaPlayer 枚举播放器状态 1234enum state { case playing case notPlaying} UIViewController类 变量、常量声明： 随机数（用于确定随机播放在线音乐） timer STKAudioPlayer播放器 已播放时长 总时长 缓存状态 1234567var randomNumber = Int(arc4random()%5)+1var timer:Timer!var bgm:Timer!let audioPlayer = STKAudioPlayer()var duration = 0.0var progess = 0.0var bufferingStatus = 2 audioPlayer代理 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647func audioPlayer(_ audioPlayer: STKAudioPlayer, didStartPlayingQueueItemId queueItemId: NSObject) { }func audioPlayer(_ audioPlayer: STKAudioPlayer, didFinishBufferingSourceWithQueueItemId queueItemId: NSObject) { var NumC:Int NumC = randomNumber randomNumber = Int(arc4random()%5)+1 while true { if NumC == randomNumber { randomNumber = Int(arc4random()%5)+1 } else { break } } bufferingStatus = 2}func audioPlayer(_ audioPlayer: STKAudioPlayer, stateChanged state: STKAudioPlayerState, previousState: STKAudioPlayerState) { }func audioPlayer(_ audioPlayer: STKAudioPlayer, didFinishPlayingQueueItemId queueItemId: NSObject, with stopReason: STKAudioPlayerStopReason, andProgress progress: Double, andDuration duration: Double) { if bufferingStatus != 2 { var NumC:Int NumC = randomNumber randomNumber = Int(arc4random()%5)+1 while true { if NumC == randomNumber { randomNumber = Int(arc4random()%5)+1 } else { break } } bufferingStatus = 2 } audioPlayer.stop() bgm = Timer.scheduledTimer(timeInterval: 0.3, target: self, selector: #selector(self.bgm(_:)), userInfo: nil, repeats: true) audioPlayer.unmute() audioPlayer.play(&quot;http://47.115.141.93/songs/\\(randomNumber).mp3&quot;)}func audioPlayer(_ audioPlayer: STKAudioPlayer, unexpectedError errorCode: STKAudioPlayerErrorCode) { print(errorCode)} 增加timer事件 1234567891011121314@objc func tick(_ timer:Timer) { duration = audioPlayer.duration progess = audioPlayer.progress if audioPlayer.state != STKAudioPlayerState.buffering { self.bufferingStatus = 0 }}@objc func bgm(_ timer:Timer) { if bufferingStatus == 0 { setLockScreenDisplay() bgm.invalidate() }} 复写viewDidLoad： 配置timer 配置audioPlayer 生效闭包 12345678910timer = Timer.scheduledTimer(timeInterval: 0.35, target: self, selector: #selector(self.tick(_:)), userInfo: nil, repeats: true)bgm = Timer.scheduledTimer(timeInterval: 0.3, target: self, selector: #selector(self.bgm(_:)), userInfo: nil, repeats: true)audioPlayer.play(&quot;http://47.115.141.93/songs/\\(randomNumber).mp3&quot;)audioPlayer.delegate = selfbackground()backgroundMusic()creatRemoteCommandCenter() 复写viewWillAppear 12becomeFirstResponder() UIApplication.shared.beginReceivingRemoteControlEvents() 复写viewWillDisappear 12resignFirstResponder() UIApplication.shared.endReceivingRemoteControlEvents() RemoteCenter配置 12345678910111213141516171819202122232425func creatRemoteCommandCenter() { let commandCenter = MPRemoteCommandCenter.shared() commandCenter.playCommand.addTarget { [] event in self.resumeAndPauseWhtherPause(false) return .success } commandCenter.pauseCommand.addTarget { [] event in self.resumeAndPauseWhtherPause(true) return .success } commandCenter.nextTrackCommand.addTarget { [] event in self.next() return .success } commandCenter.previousTrackCommand.addTarget { [] event in self.next() return .success } commandCenter.changePlaybackPositionCommand.addTarget{ [] event in let playbackPositionEvent = event as? MPChangePlaybackPositionCommandEvent self.audioPlayer.seek(toTime: playbackPositionEvent!.positionTime) return .success } } 配置播放下一首歌闭包 12345678910111213141516171819202122232425262728293031323334func next() { var info = MPNowPlayingInfoCenter.default().nowPlayingInfo audioPlayer.mute() audioPlayer.pause() var NumC:Int NumC = randomNumber randomNumber = Int(arc4random()%5)+1 while true { if NumC == randomNumber { randomNumber = Int(arc4random()%5)+1 } else { break } } bufferingStatus = 2 audioPlayer.seek(toTime: duration-0.001) info![MPNowPlayingInfoPropertyElapsedPlaybackTime] = audioPlayer.progress audioPlayer.resume()}func resumeAndPauseWhtherPause(_ status: Bool) { var info = MPNowPlayingInfoCenter.default().nowPlayingInfo if status { audioPlayer.pause() info![MPNowPlayingInfoPropertyPlaybackRate] = 0.00001 info![MPNowPlayingInfoPropertyElapsedPlaybackTime] = audioPlayer.progress }else { audioPlayer.resume() info![MPNowPlayingInfoPropertyPlaybackRate] = 1.0 info![MPNowPlayingInfoPropertyElapsedPlaybackTime] = audioPlayer.progress } MPNowPlayingInfoCenter.default().nowPlayingInfo = info} 设置锁屏RemoteController 1234567func setLockScreenDisplay() { var info = Dictionary&lt;String, Any&gt;() info[MPMediaItemPropertyTitle] = randomNumber info[MPMediaItemPropertyPlaybackDuration] = TimeInterval(duration) info[MPNowPlayingInfoPropertyPlaybackRate] = 1.0 MPNowPlayingInfoCenter.default().nowPlayingInfo = info } 设置背景音乐闭包 123456func backgroundMusic() { let session = AVAudioSession.sharedInstance() try? session.setCategory(AVAudioSession.Category.playback) print(AVAudioSession.Category.playback) try? session.setActive(true) } 原文件","link":"/iOS/Music/"},{"title":"MyPlanet","text":"记录一下第一个较完整的swift App Github：https://github.com/SaitoYayoi/My_Planet 原文件： MD5：24548214ff88c65757181803ada7936f SHA-1：d704a0b51f44070cf7fa0a4ca6ebcc1f1e79a26f SHA-256：16c90796c873f0884dfb006be82614ed56e1dd91db0962f2c0d0cf43a5113131 分类汇编：首页、Mail页、Music页、Weather页、Fate页","link":"/iOS/MyPlanet/"}],"tags":[{"name":"一点点码的东西","slug":"一点点码的东西","link":"/tags/%E4%B8%80%E7%82%B9%E7%82%B9%E7%A0%81%E7%9A%84%E4%B8%9C%E8%A5%BF/"},{"name":"随记","slug":"随记","link":"/tags/%E9%9A%8F%E8%AE%B0/"},{"name":"MyPlanet","slug":"MyPlanet","link":"/tags/MyPlanet/"}],"categories":[{"name":"网页","slug":"网页","link":"/categories/%E7%BD%91%E9%A1%B5/"},{"name":"日本語","slug":"日本語","link":"/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"iOS","slug":"iOS","link":"/categories/iOS/"}]}