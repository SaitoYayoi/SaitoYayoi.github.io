{"pages":[{"title":"","text":"Welcome I can’t remember which version the blog is ,Giving up halfway is so annoyiny. Welcome to the world of Cool Guy！！Eventually I decide to record my daily life!! This time the man gives up half way is a dog About the blog Name is “Flipped”, oh I love the word. Domain is named after the first letter of the Kana”ShikanoYuta”(Thinking of a name is so hard). However, I now find that the domain is strange and hard to remember isn’t it. Anyway—— Here comes the wonderful life of Cool Guy! Included but not limited： recode some articles of great shot Write primary school composition in Japanese A few source code Daily negativity Local Download Wait for exploring About Cool Guy To err is human, to forgive, divine. Actually, the Kanji of ShikanoYuta is “鹿野佑太”👍（But I have forgotten cuz long time no use. Really COOL AND HANDSOME Came from a distant Unknown Planet QQ:2635313260 Weibo:@_文藝青年 Github、Twtter and Facebook are in the Side Bar√ To resolve the server in China mainland, I have to put it on records, but I haven’t grown into 18 years old, hence only using Github Pages. While I don’t know whether it is stable. (Is there a single person that visit my website except me?) Something strange are mixed—— This article is also available in 中文, 日本語, 한국어,.","link":"/about/index-English.html"},{"title":"","text":"关于—— 这是不知道第几个版本的Blog了，我 恨 烂 尾。 欢迎来到花花酷盖的世界！！终于又决定要记录生活了吗！！ 这次谁再烂尾谁是狗 关于Blog 名字的话用了很喜欢的Flipped，我 爱 怦 然 心 动 域名是根据ShikanoYuta每个假名首字母得来的（因为真的好难想名字啊） 但是现在发现这域名好奇怪而且还不好记（？ 不管了—— 话说回来，这里被用来记录酷盖的滋润生活！ 包括但不限于： 码了亿点点大佬的文章 用日语写小学作文 关于一点点菜鸡的源码 日常负能 用作本地下载 待开发 关于酷盖 宽和慈善，不杵于物，进退沉浮，自得而已。 其实ShikanoYuta的汉字是鹿野佑太👍（虽然太久没用自己都忘了 真的很酷 还帅 来自一颗遥远的未知行星 QQ:2635313260 微博:@_文藝青年 Github、Twtter和Facebook的话在侧边栏有√ 还有就是因为国内的服务器域名解析需要备案，我居然还没满18岁（泪），所以只能用GithubPages了，也不知道访问速度咋样，可能 经常 打不开（但是除了我真的会有人打开吗） 奇怪的东西混进来了—— 本文同时提供以下语言的翻译: 日本語、 English、 한국어。","link":"/about/index.html"},{"title":"","text":"ようこそへ こちらは何バージョンのブログが覚えない、中途に諦めることが大変。 かっこい世界にいらっしゃいませ！！やっとまだ生活を記録することを決めましたか！ 今回、誰が中途に諦めたら、誰が犬だ ブログについて 名前なら、大好きな「Flipped」を使って。 ドメインは鹿野祐太の仮名の頭字を取り組みきたと言う名前でーす でも、今このドメインはおかしくて覚えにくいと見つけた（涙） なんとしてもー こちらがイケメンの充実な生活を聞き取ることっていうか 含むけど、限らないオプション： アニギの文章を記録 日本語で小学校の作文を写す ちっと弱いソースコードを記録 日常消極気持ちを発散 ダウンロードサイトになって 開発に待ち イケメンについて 花が咲き、花が散る、繰り返しの繰り返し、生きながらえてきたが、今昔は昨日ではない。 実はShikanoYutaの漢字が鹿野佑太👍（長すぎ使わずから自分が忘れちゃったけれども ホントウクール 並びにかっこいい ある遠い未知な星から来ていました QQ:2635313260 Weibo:@_文藝青年 Github、TwtterやFacebookならサイトバーにあるよ√ 国内のサーバならドメインが解析したら、控えってことが必要ですけど、十八歳がまだ未満（涙）、ですからGithubPagesをしか使いません，訪問速度はどうかまだ知らないし，時々開けないだと考えて。（でも僕しか他の人は開くことの可能性があるのか） 変なものが混み込んだ—— この文章も 中文、 English、 한국어で可用です。","link":"/about/index-Japanese.html"},{"title":"","text":"어서 오십시오—— 어떤 버전의 블로그인지 모르겠습니다, 반쯤 포기하는 게 싫어。 꽃쿨 가이의 세계에 오신 것을 환영합니다, 마침내 인생을 다시 기록하기로 결정 했습니까!! 이번에는 누가 포기할까요 블로그 정보 이름으로 아주 좋아하는 Flipped를 사용했는데, 마음이 감동했습니다. 도메인 이름은 ShikanoYuta의 각 가명의 첫 글자를 기반으로합니다 (이름을 생각하기가 정말 어렵 기 때문에) 하지만 이제는이 도메인 이름이 이상하고 기억하기 어렵습니다 (? 상관 안해—— 그래도 이곳은 구 가이의 삶을 기록하는 데 사용되었습니다! 다음을 포함하지만 이에 국한되지 않습니다： 약간의 고급 기사 기록 일본어로 초등학교 작문 쓰기 매우 약한 코드 불행 기록 로컬 다운로드로 사용 개발 대기 중 잘 생긴 남자에 대해 인생의 위대한 목표는 지식이 아니라 행동이다. 사실 Shikano Yuta의 한자는 鹿野佑太 👍 (너무 길었지만 잊어 버렸습니다 정말 멋진 멋진 먼 미지의 행성에서 QQ:2635313260 웨이 보:@_文藝青年 Github, Twtter 및 Facebook에는 사이드 바에 가 있습니다√. 또한 국내 서버 도메인 이름 확인이 필요하기 때문에 아직 18 세 (눈물)가 아니 어서 GithubPages 만 사용할 수 있습니다. 하지만 내가 정말로 하는거 빼고는 누가 열어?) 이상한 일이—— 이 기사는 또한 다음 언어로 번역을 제공합니다: 中文, English, 日本語.","link":"/about/index-Korean.html"}],"posts":[{"title":"Markdown语法","text":"码了一点点的Markdown的语法 一、标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。 示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 二、字体 加粗 要加粗的文字左右分别用两个*号包起来 斜体 要倾斜的文字左右分别用一个*号包起来 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 删除线 要加删除线的文字左右分别用两个~~号包起来 示例： 1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下： 这是加粗的文字这是倾斜的文字这是斜体加粗的文字\\这是加删除线的文字 三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt; n个…貌似可以一直加下去，但没神马卵用 示例： 123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 效果如下： 这是引用的内容 这是引用的内容 这是引用的内容 四、分割线三个或者三个以上的 - 或者 * 都可以。 示例： 1234-------******** 效果如下：可以看到，显示效果是一样的。 五、图片语法： 1234![图片alt](图片地址 ''图片title'')图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 示例： 12![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;) 效果如下： img blockchain 上传本地图片直接点击导航栏的图片标志，选择图片即可 markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。markdown图床 六、超链接语法： 12[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加 示例： 12[简书](http://jianshu.com)[百度](http://baidu.com) 效果如下： 简书百度 注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。 1234&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt; 七、列表无序列表语法：无序列表用 - + * 任何一种都可以 12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 效果如下： 列表内容 列表内容 列表内容 有序列表语法：数字加点 123451. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格 效果如下： 列表内容 列表内容 列表内容 列表嵌套上一级和下一级之间敲三个空格即可 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级无序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 一级有序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级有序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 八、表格语法： 1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 示例： 12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 效果如下： 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 九、代码语法：单行代码：代码之间分别用一个反引号包起来 1`代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 12345(```) 代码... 代码... 代码...(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 示例： 单行代码 1`create database hero;` 代码块 123456(```) function fun(){ echo &quot;这是一句非常牛逼的代码&quot;; } fun();(```) 效果如下： 单行代码 1create database hero; 代码块 1234function fun(){ echo &quot;这是一句非常牛逼的代码&quot;;}fun(); 十、本地下载语法 1[下载内容](/download/文件名) 作者：高鸿祥链接：https://www.jianshu.com/p/191d1e21f7ed来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","link":"/%E7%BD%91%E9%A1%B5/Markdown%E8%AF%AD%E6%B3%95/"},{"title":"頭に突然込んだまま造語","text":"造語（ぞうご）は、新たに語（単語）を造ることや、既存の語を組み合わせて新たな意味の語を造ること、また、そうして造られた語である。新たに造られた語については、新語または新造語とも呼ばれる。 ​ 昔からいつもこの企画があるんけど、自分の言語を作ろうと思い、最近から真面目にやろうということを決めました。まっ始まるときから一大問題があって、それが読み方や書き方またはアルファベットを確定すること。自分が外で「フランス語を勉強しているよ、すごくわかっちゃったよねー」という、実は全然そんなことがないである。まだ、ゲルマン語系の発音や文字を選んだ、（興味あるから）。そして、IPA（って国際音標表）を調べて勉強し始めた。発音がヤッパリむずかしいね。特にたくさんの音標の発音が似てる。 て、「大舌音」と言うおとが出来ない、「小舌音」は一生懸命に勉強するあとで、成功したのに。サスガ俺！！！！！諦めぬ！それが一つだけ今回の冬休みの要望だろうね。じゃー、頑張ろ！！！ 2020/2/11に更新：諦めてしまいました","link":"/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E9%80%A0%E8%AF%AD/"},{"title":"My Planet-MainViewController","text":"首页主要实现功能： 判断用户是否联网 完成通知中心Configuration “New Message”字样闪烁 四个跳转UIButton LocationManager初始化（为Weather做准备） 实现Tapic/Hapic震动反馈 全局部分 引入： UIKit SnapKit（约束） CoreLocation（定位） UserNotification（通知中心） AudioToolBox.AudioServices（震动反馈） 12345import UIKitimport SnapKitimport CoreLocationimport UserNotificationsimport AudioToolbox.AudioServices 全局变量、常量声明： Latitude（纬度） Longitude（经度） LongtitudePlusLatitude（经度+纬度） Swidth（屏幕宽度） Sheight（屏幕长度） 123456var latitude = 0.0var longitude = 0.0var longtitudePlusLatitude:NSString? = &quot;nil&quot;let Swidth = UIScreen.main.bounds.widthlet Sheight = UIScreen.main.bounds.height 闭包导入： 用于判断联网情况 123456789101112131415161718192021func requestUrl(urlString: String) -&gt; Bool { let url: NSURL = NSURL(string: urlString)! let request: NSMutableURLRequest = NSMutableURLRequest(url: url as URL) request.timeoutInterval = 5 var response: URLResponse? do { try NSURLConnection.sendSynchronousRequest(request as URLRequest, returning: &amp;response) if let httpResponse = response as? HTTPURLResponse { if httpResponse.statusCode == 200 { return true } } return false } catch (let error) { print(&quot;error:\\(error)&quot;) return false }} 判断软件版本（iOS10及以上） 1@available(iOS 10.0, *) UIViewController类 变量、常量声明： locationManager（用于定位） timer naviImage（图片） UIButton bgView（背景图片） UITapGestureRecognizer 1234567891011var locationManager:CLLocationManager! var timer:Timer! var timer2:Timer! let naviImage = UIImageView() let nav1 = UIButton(type: UIButton.ButtonType.custom) let nav2 = UIButton(type: UIButton.ButtonType.custom) let nav3 = UIButton(type: UIButton.ButtonType.custom) let nav4 = UIButton(type: UIButton.ButtonType.custom) let bgView = UIImageView() let bg = UIImage(named: &quot;bg&quot;)?.resizableImage(withCapInsets: UIEdgeInsets(top: 60, left: 15, bottom: 55, right: 15), resizingMode: .stretch) var Tap = UITapGestureRecognizer() 复写viewDidLoad闭包： 生效通知 定位服务配置 遍历图片保证背景循环播放 timer配置 增加约束 增加UIbutton单击事件 设置UIButton属性 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778 notification() everyDayNotification() locationManager = CLLocationManager() locationManager.delegate = self locationManager.desiredAccuracy = kCLLocationAccuracyBest locationManager.distanceFilter = 10.0 locationManager.startUpdatingLocation() if (CLLocationManager.authorizationStatus() == CLAuthorizationStatus.notDetermined){ locationManager?.requestWhenInUseAuthorization() } var background = [UIImage]() for i in 1 ... 4 { background.append(UIImage(named: &quot;bg\\(i)&quot;)!) } let imageView = UIImageView() imageView.animationImages = background imageView.animationDuration = 5 imageView.animationRepeatCount = 0 imageView.startAnimating() self.view.addSubview(imageView) imageView.snp.makeConstraints {(bg) in bg.top.bottom.left.right.equalTo(0) bg.center.equalToSuperview() } timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(self.disappear), userInfo: nil, repeats: true) timer2 = Timer.scheduledTimer(timeInterval: 2, target: self, selector: #selector(self.appear), userInfo: nil, repeats: true) super.viewDidLoad() naviImage.image = UIImage(named: &quot;navi&quot;) bgView.image = bg self.view.addSubview(bgView) bgView.snp.makeConstraints {(bg) in bg.center.equalToSuperview() bg.height.equalTo(100) bg.left.equalTo(0).offset(35) bg.right.equalTo(0).offset(-35) } self.view.addSubview(naviImage) naviImage.snp.makeConstraints {(make) in make.width.equalTo(210) make.height.equalTo(20) make.center.equalToSuperview() } Tap = UITapGestureRecognizer(target: self, action: #selector(self.animateAction(_:))) Tap.numberOfTapsRequired = 1 Tap.numberOfTouchesRequired = 1 self.view.addGestureRecognizer(Tap) nav1.addTarget(self, action: #selector(navi1), for: .touchUpInside) nav2.addTarget(self, action: #selector(navi2), for: .touchUpInside) nav3.addTarget(self, action: #selector(navi3), for: .touchUpInside) nav3.addTarget(self, action: #selector(navi3), for: .touchUpInside) nav4.addTarget(self, action: #selector(navi4), for: .touchUpInside) nav1.backgroundColor = UIColor.clear nav1.setTitle(&quot;看看信箱！&quot;, for: UIControl.State()) nav1.setTitleColor(UIColor.white, for: UIControl.State()) nav1.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30) nav2.backgroundColor = UIColor.clear nav2.setTitle(&quot;看看天气。&quot;, for: UIControl.State()) nav2.setTitleColor(UIColor.white, for: UIControl.State()) nav2.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30) nav3.backgroundColor = UIColor.clear nav3.setTitle(&quot;听一首歌。&quot;, for: UIControl.State()) nav3.setTitleColor(UIColor.white, for: UIControl.State()) nav3.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30) nav4.backgroundColor = UIColor.clear nav4.setTitle(&quot;看看运势！&quot;, for: UIControl.State()) nav4.setTitleColor(UIColor.white, for: UIControl.State()) nav4.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30) 增加UIView动画，实现壁纸循环播放 12345678910@objc func disappear() { UIView.animate(withDuration: 0.5, animations: { self.naviImage.alpha = 0 })}@objc func appear() { UIView.animate(withDuration: 0.5, animations: { self.naviImage.alpha = 1 })} 通知及每日通知配置 1234567891011121314151617181920212223242526272829303132func notification() { let content = UNMutableNotificationContent() content.sound = UNNotificationSound.default content.body = NSString.localizedUserNotificationString(forKey: &quot;您回到了地球&quot;, arguments: nil) let infoDic = NSDictionary(object: &quot;message.&quot;, forKey: &quot;infoKey&quot; as NSCopying) content.userInfo = infoDic as [NSObject : AnyObject] let trigger = UNTimeIntervalNotificationTrigger.init(timeInterval: 5.0, repeats: false) let request = UNNotificationRequest.init(identifier: &quot;FiveSecond&quot;, content: content, trigger: trigger) let center = UNUserNotificationCenter.current() center.add(request) } func everyDayNotification() { let content = UNMutableNotificationContent() content.sound = UNNotificationSound.default content.body = NSString.localizedUserNotificationString(forKey: &quot;来看看今天的天气和运势吧!&quot;, arguments: nil) var compoents:DateComponents = DateComponents() compoents.hour = 9 let infoDic = NSDictionary(object: &quot;message.&quot;, forKey: &quot;infoKey&quot; as NSCopying) content.userInfo = infoDic as [NSObject : AnyObject] let trigger = UNCalendarNotificationTrigger.init(dateMatching: compoents, repeats: true) let request = UNNotificationRequest.init(identifier: &quot;FiveSecond&quot;, content: content, trigger: trigger) let center = UNUserNotificationCenter.current() center.add(request) } 定位服务配置 12345678func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) { let location:CLLocation = locations[0] latitude = location.coordinate.latitude longitude = location.coordinate.longitude longtitudePlusLatitude = (&quot;\\(NSString(string: String(longitude))),\\(NSString(string: String(latitude)))&quot;) as NSString UserDefaults().setValue(longtitudePlusLatitude, forKey: &quot;info&quot;) locationManager.stopUpdatingLocation()} UIButton单击事件： timer失效（背景停止刷新） 增加震动反馈（AudioServicesPlaySystemSound） 将四个子UIButton添加到视图 添加UIButton约束 123456789101112131415161718192021222324252627282930313233343536373839404142timer.invalidate()timer2.invalidate()let soundID = SystemSoundID(1519)AudioServicesPlaySystemSound(soundID)naviImage.removeFromSuperview()Tap.removeTarget(self, action: #selector(self.animateAction(_:)))nav1.alpha = 0nav2.alpha = 0nav3.alpha = 0nav4.alpha = 0self.view.addSubview(nav1)self.view.addSubview(nav2)self.view.addSubview(nav3)self.view.addSubview(nav4)UIView.animate(withDuration: 0.6) { self.bgView.alpha = 0 self.nav1.alpha = 1 self.nav2.alpha = 1 self.nav3.alpha = 1 self.nav4.alpha = 1} nav1.snp.makeConstraints {(nav1) in nav1.centerY.equalToSuperview().offset(-80) nav1.centerX.equalToSuperview()}nav2.snp.makeConstraints {(nav2) in nav2.centerY.equalToSuperview().offset(-40) nav2.centerX.equalToSuperview()}nav3.snp.makeConstraints {(nav3) in nav3.centerY.equalToSuperview() nav3.centerX.equalToSuperview()}nav4.snp.makeConstraints {(nav4) in nav4.centerY.equalToSuperview().offset(40) nav4.centerX.equalToSuperview()} 增加子UIButton单击事件： 震动反馈 跳转子页面 部分页面验证是否联网，网络不通则跳转至Error-Controller 1234567891011121314151617181920212223242526272829303132333435363738@objc func navi1(_ sender: UIButton) { let soundID = SystemSoundID(1519) AudioServicesPlaySystemSound(soundID) let mail = MailViewController() self.present(mail, animated: true, completion: nil) } @objc func navi2(_ sender: UIButton) { let soundID = SystemSoundID(1519) AudioServicesPlaySystemSound(soundID) let networkStatus = requestUrl(urlString: &quot;https://www.baidu.com&quot;) if networkStatus == false { let fal = NetworkErrorWeatherViewController() self.present(fal, animated: true, completion: nil) } else { let weather = WeatherViewController() self.present(weather, animated: true, completion: nil) } } @objc func navi3(_ sender: UIButton) { let soundID = SystemSoundID(1519) AudioServicesPlaySystemSound(soundID) let music = MusicViewController() self.present(music, animated: true, completion: nil) } @objc func navi4(_ sender: UIButton) { let soundID = SystemSoundID(1519) AudioServicesPlaySystemSound(soundID) let networkStatus = requestUrl(urlString: &quot;https://www.baidu.com&quot;) if networkStatus == false { let fal = NetworkErrorFateViewController() self.present(fal, animated: true, completion: nil) } else { let fate = FateViewController() self.present(fate, animated: true, completion: nil) } } 原文件","link":"/iOS/Main/"},{"title":"My Planet-MailViewController","text":"Mail页主要实现功能： 单字逐秒显示 简单交互 返回首页 全局部分 引入： UIKit SnapKit MessageUI 123import UIKitimport SnapKitimport MessageUI UIViewController类 变量、常量声明： 显示的字符串 UILabel 遍历次数 UIButton 1234var str = &quot;2020年7月29日 星期三 \\n...\\n这将会是My Planet的最后一个版本\\n终究是烂尾了\\nAnyway...\\n晚安...&quot; let text = UILabel() var i = 1 let returnHomeBtn = UIButton(type: UIButton.ButtonType.roundedRect) 复写viewDidLoad闭包： timer配置 UIButton配置 背景图片遍历 UILabel配置、添加约束 12345678910111213141516171819202122232425262728293031323334let timer:Timer!timer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(MailViewController.wordPrint(_:)), userInfo: nil, repeats: true)returnHomeBtn.backgroundColor = UIColor.clearreturnHomeBtn.setTitle(&quot;返回主页&quot;, for: .normal)returnHomeBtn.setTitleColor(UIColor.white, for: UIControl.State())returnHomeBtn.titleLabel?.font = UIFont(name: &quot;Zpix&quot;, size: 30)returnHomeBtn.addTarget(self, action: #selector(self.returnHome(_:)), for: UIControl.Event.touchUpInside)var background = [UIImage]() for i in 1 ... 4 { background.append(UIImage(named: &quot;bg\\(i)&quot;)!) }let imageView = UIImageView()imageView.animationImages = backgroundimageView.animationDuration = 5imageView.animationRepeatCount = 0imageView.startAnimating()self.view.addSubview(imageView) imageView.snp.makeConstraints {(bg) in bg.top.bottom.left.right.equalTo(0) bg.center.equalToSuperview()} text.backgroundColor = UIColor.clearself.view.addSubview(text)text.textColor = UIColor.whitetext.lineBreakMode = NSLineBreakMode.byWordWrappingtext.numberOfLines = 0text.snp.makeConstraints {(text) in text.width.equalTo(300) text.center.equalToSuperview()} timer配置 1234567891011121314151617if i &lt;= str.count{let output = str.prefix(i) let paraph = NSMutableParagraphStyle() paraph.lineSpacing = 15 let attributes = [NSAttributedString.Key.font: UIFont(name: &quot;Zpix&quot;, size: 22), NSAttributedString.Key.paragraphStyle: paraph] text.attributedText = NSAttributedString(string: String(output), attributes: attributes)i+=1}else{ timer.invalidate() self.view.addSubview(returnHomeBtn) returnHomeBtn.snp.makeConstraints {(btn) in btn.centerX.equalToSuperview() btn.centerY.equalTo(text).offset(150) }} 返回主界面按钮 123@objc func returnHome(_ btn: UIButton) { self.dismiss(animated: true, completion: nil)} 原文件","link":"/iOS/Mail/"},{"title":"My Planet-FateViewController","text":"Fate页主要实现功能： 用户输入星座 返回当日运势 打字机输出 返回首页 API源：聚合API 全局部分 引入: UIKit SwiftyJSON 12import UIKitimport SwiftyJSON 全局变量、常量声明： timer UILabel UITextField（监测用户输入） 初始字符串str 遍历次数 JSON字典 12345678910var timer:Timer!var timer2:Timer!let preTextLabel = UILabel()let TextField = UITextField()let consLabel = UILabel()let str = &quot;你的星座是:&quot;var i = 0var times = 0var cons = &quot;nil&quot;var info:Dictionary&lt;String,JSON&gt; = [&quot;name&quot;:JSON(&quot;nil&quot;), &quot;datetime&quot;:JSON(&quot;nil&quot;), &quot;all&quot;:JSON(&quot;nil&quot;), &quot;color&quot;:JSON(&quot;nil&quot;), &quot;health&quot;:JSON(&quot;nil&quot;), &quot;love&quot;:JSON(&quot;nil&quot;), &quot;money&quot;:JSON(&quot;nil&quot;), &quot;number&quot;:JSON(&quot;nil&quot;), &quot;QFriend&quot;:JSON(&quot;nil&quot;), &quot;summary&quot;:JSON(&quot;nil&quot;), &quot;work&quot;:JSON(&quot;nil&quot;)] UIViewController类 返回首页 1self.dismiss(animated: true, completion: nil) timer配置（打字机） 12345678910111213141516171819202122232425262728 preTextLabel.backgroundColor = UIColor.clear self.view.addSubview(preTextLabel) preTextLabel.textColor = UIColor.white preTextLabel.font = UIFont(name: &quot;Zpix&quot;, size: 20) preTextLabel.lineBreakMode = NSLineBreakMode.byWordWrapping preTextLabel.numberOfLines = 0 preTextLabel.snp.makeConstraints {(preTextLabel) in preTextLabel.width.equalTo(300) preTextLabel.centerX.equalToSuperview().offset(-25) preTextLabel.centerY.equalToSuperview().offset(-50) } if i &lt;= 8{ let output = str.prefix(i) preTextLabel.text = String(output) i+=1}else { timer.invalidate()}if i == 8{ self.view.addSubview(TextField) TextField.snp.makeConstraints {(textField) in textField.width.equalTo(100) textField.centerY.equalTo(preTextLabel) textField.centerX.equalTo(preTextLabel).offset(25) }} TextField代理、URL会话配置及访问、防呆、分析返回数据 123456789101112131415161718192021222324252627TextField.resignFirstResponder()cons = TextField.text!if cons == &quot;水瓶&quot; || cons == &quot;双鱼&quot; || cons == &quot;白羊&quot; || cons == &quot;金牛&quot; || cons == &quot;双子&quot; || cons == &quot;巨蟹&quot; || cons == &quot;狮子&quot; || cons == &quot;处女&quot; || cons == &quot;天秤&quot; || cons == &quot;天蝎&quot; || cons == &quot;射手&quot; || cons == &quot;摩羯&quot; { cons = cons + &quot;座&quot;}let urlString = &quot;http://web.juhe.cn:8080/constellation/getAll?key=b9e394f24f7890c24b19db0ef6b44c00&amp;type=today&amp;consName=\\(cons)&quot;let urlStr = urlString.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)let config = URLSessionConfiguration.defaultlet url = URL(string: urlStr!)let session = URLSession(configuration: config)let task = session.dataTask(with: url!) {(data, response, error) in let json = try! JSON(data: data!) info[&quot;name&quot;] = json[&quot;name&quot;] info[&quot;datetime&quot;] = json[&quot;datetime&quot;] info[&quot;all&quot;] = json[&quot;all&quot;] info[&quot;color&quot;] = json[&quot;color&quot;] info[&quot;health&quot;] = json[&quot;health&quot;] info[&quot;love&quot;] = json[&quot;love&quot;] info[&quot;money&quot;] = json[&quot;money&quot;] info[&quot;number&quot;] = json[&quot;number&quot;] info[&quot;QFriend&quot;] = json[&quot;QFriend&quot;] info[&quot;summary&quot;] = json[&quot;summary&quot;] info[&quot;work&quot;] = json[&quot;work&quot;] i = 100}task.resume()return true 复写viewDidLoad： timer配置 textField配合 背景图片遍历 123456789101112131415161718192021222324timer = Timer.scheduledTimer(timeInterval: 0.35, target: self, selector: #selector(FateViewController.preTextPrint(_:)), userInfo: nil, repeats: true)timer2 = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(FateViewController.consPrint(_:)), userInfo: nil, repeats: true)TextField.borderStyle = UITextField.BorderStyle.roundedRectTextField.textAlignment = NSTextAlignment.centerTextField.backgroundColor = UIColor.clearTextField.returnKeyType = UIReturnKeyType.doneTextField.delegate = selfTextField.textColor = UIColor.whiteTextField.font = UIFont(name: &quot;Zpix&quot;, size: 20)var background = [UIImage]() for i in 1 ... 4 { background.append(UIImage(named: &quot;bg\\(i)&quot;)!) } let imageView = UIImageView() imageView.animationImages = background imageView.animationDuration = 5 imageView.animationRepeatCount = 0 imageView.startAnimating() self.view.addSubview(imageView) imageView.snp.makeConstraints {(bg) in bg.top.bottom.left.right.equalTo(0) bg.center.equalToSuperview() } timer配置（打字机）、增加约束 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566consLabel.backgroundColor = UIColor.clear self.view.addSubview(consLabel) consLabel.textColor = UIColor.white consLabel.lineBreakMode = NSLineBreakMode.byWordWrapping consLabel.numberOfLines = 0 consLabel.snp.makeConstraints {(consLabel) in consLabel.width.equalTo(300) consLabel.center.equalToSuperview() } if i == 100 { if cons == &quot;白羊座&quot; || cons == &quot;金牛座&quot; || cons == &quot;双子座&quot; || cons == &quot;巨蟹座&quot; || cons == &quot;狮子座&quot; || cons == &quot;处女座&quot; || cons == &quot;天秤座&quot; || cons == &quot;天蝎座&quot; || cons == &quot;射手座&quot; || cons == &quot;摩羯座&quot; || cons == &quot;水瓶座&quot; || cons == &quot;双鱼座&quot; { let printStr = &quot;\\(info[&quot;datetime&quot;]!.string!)的\\(info[&quot;name&quot;]!.string!)\\n综合指数:\\(info[&quot;all&quot;]!.string!)\\n幸运色:\\(info[&quot;color&quot;]!.string!)\\n健康指数:\\(info[&quot;health&quot;]!.string!)\\n爱情指数:\\(info[&quot;love&quot;]!.string!)\\n财运指数:\\(info[&quot;money&quot;]!.string!)\\n幸运数字:\\(info[&quot;number&quot;]!.int!)\\n速配星座:\\(info[&quot;QFriend&quot;]!.string!)\\n工作指数:\\(info[&quot;work&quot;]!.string!)\\n今日概述:\\(info[&quot;summary&quot;]!.string!)&quot; preTextLabel.text = &quot;&quot; TextField.removeFromSuperview() if times &lt;= printStr.count { let output = printStr.prefix(times) let paraph = NSMutableParagraphStyle() paraph.lineSpacing = 10 let attributes = [NSAttributedString.Key.font: UIFont(name: &quot;Zpix&quot;, size: 22), NSAttributedString.Key.paragraphStyle: paraph] consLabel.attributedText = NSAttributedString(string: String(output), attributes: attributes) times+=1 } else { timer2.invalidate() let Return = UIButton(type: UIButton.ButtonType.roundedRect) let returnImage = UIImage(named: &quot;return&quot;) Return.setBackgroundImage(returnImage, for: .normal) Return.addTarget(self, action: #selector(self.returnHome(_:)), for: UIControl.Event.touchUpInside) self.view.addSubview(Return) Return.snp.makeConstraints {(button) in button.centerX.equalTo(consLabel).offset(150) button.centerY.equalTo(consLabel).offset(320) } } } else { preTextLabel.text = &quot;&quot; TextField.removeFromSuperview() let str = &quot;没有在星座大全中找到\\(cons)\\n检查一下吧&quot; if times &lt;= str.count { let output = str.prefix(times) let paraph = NSMutableParagraphStyle() paraph.lineSpacing = 10 let attributes = [NSAttributedString.Key.font: UIFont(name: &quot;Zpix&quot;, size: 22), NSAttributedString.Key.paragraphStyle: paraph] consLabel.attributedText = NSAttributedString(string: String(output), attributes: attributes) times+=1 } else { timer2.invalidate() let Return = UIButton(type: UIButton.ButtonType.roundedRect) let returnImage = UIImage(named: &quot;return&quot;) Return.setBackgroundImage(returnImage, for: .normal) Return.addTarget(self, action: #selector(self.returnHome(_:)), for: UIControl.Event.touchUpInside) self.view.addSubview(Return) Return.snp.makeConstraints {(button) in button.centerX.equalTo(consLabel).offset(110) button.centerY.equalTo(consLabel).offset(40) } } } } } 原文件","link":"/iOS/Fate/"},{"title":"My Planet-WeatherViewController","text":"Music页主要实现功能： 自动定位 获取当地天气 打字机显示 返回首页 API源：高德API 地名与编号对应文档：点击下载 全局部分 引入： UIKit CoreLocation SwiftyJSON（JSON解决方案） 123import UIKitimport CoreLocationimport SwiftyJSON UIViewController类 变量、常量声明： UILabel UITextField（用于输出文本） API地址 重组字符串 准备文字 timer 现在区域 遍历次数 JSON包 12345678910111213141516let preTextLabel = UILabel()let weatherInfo = UILabel()let textField = UITextField()var warning = 0let tudeToLocation = &quot;https://restapi.amap.com/v3/geocode/regeo?output=JSON&amp;radius=1000&amp;extensions=all&amp;key=14960ff6beb497b9b3976a298a7823d4&amp;location=%@&quot;let weatherUrl = &quot;https://restapi.amap.com/v3/weather/weatherInfo?key=ac27e18866b8b0b3b5270054264a484d&amp;city=%@&quot;let preText = &quot;正在给气象局打电话...&quot;var timer:Timer!var timer2:Timer!var nowDistrict = &quot;nil&quot;var times = 0var info:Dictionary&lt;String,JSON&gt; = [&quot;温度&quot;:JSON(&quot;nil&quot;),&quot;湿度&quot;:JSON(&quot;nil&quot;),&quot;天气&quot;:JSON(&quot;nil&quot;),&quot;风向&quot;:JSON(&quot;nil&quot;),&quot;风力&quot;:JSON(&quot;nil&quot;)] var i = 0 timer配置 12345678910111213141516171819preTextLabel.backgroundColor = UIColor.clear self.view.addSubview(preTextLabel) preTextLabel.textColor = UIColor.white preTextLabel.font = UIFont(name: &quot;Zpix&quot;, size: 20) preTextLabel.lineBreakMode = NSLineBreakMode.byWordWrapping preTextLabel.numberOfLines = 0 preTextLabel.snp.makeConstraints {(preTextLabel) in preTextLabel.width.equalTo(300) preTextLabel.centerX.equalToSuperview().offset(-25) preTextLabel.centerY.equalToSuperview().offset(-50) } if i &lt;= 12{ let output = preText.prefix(i) preTextLabel.text = String(output) i+=1 } else { timer.invalidate() } 复写viewDidLoad 配置timer 配置plist文件路径 配置JSON字典文件转为data 读取plist文件 拼接字符串 配置URL连接 开启URL会话 分析返回数据并按照“温度、湿度、风向、风力、天气”分类并放入字典 设置背景 约束 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061timer = Timer.scheduledTimer(timeInterval: 0.3, target: self, selector: #selector(WeatherViewController.preTextPrint(_:)), userInfo: nil, repeats: true)timer2 = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(WeatherViewController.weatherinfo(_:)), userInfo: nil, repeats: true)let plistPath = Bundle.main.path(forResource: &quot;WeatherNum&quot;, ofType: &quot;plist&quot;)let data = NSMutableDictionary.init(contentsOfFile: plistPath!)!UserDefaults().string(forKey: &quot;info&quot;)let RelongtitudePlusLatitude = longtitudePlusLatitude?.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed) ?? &quot;&quot;let config1 = URLSessionConfiguration.defaultlet url1 = URL(string: String(format: tudeToLocation, RelongtitudePlusLatitude))let request1 = URLRequest(url: url1!)let session1 = URLSession(configuration: config1)let task1 = session1.dataTask(with: request1) { (data1, response, error) in let json1 = try! JSON(data: data1!) self.nowDistrict = json1[&quot;regeocode&quot;][&quot;addressComponent&quot;][&quot;district&quot;].stringValue if self.nowDistrict == &quot;&quot; || self.nowDistrict == &quot;&quot;{ self.warning = 1 let alertController = UIAlertController(title: &quot;没有获取到您的经纬度\\n即将返回星球主页…&quot;, message: nil, preferredStyle: .alert) self.present(alertController, animated: true, completion: nil) DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 4) { self.presentedViewController?.dismiss(animated: false, completion: nil) self.dismiss(animated: true, completion: nil) } } else { let midNum = data[self.nowDistrict]! as! String let districtNum = midNum let weatherUrl = &quot;https://restapi.amap.com/v3/weather/weatherInfo?key=ac27e18866b8b0b3b5270054264a484d&amp;city=\\(districtNum)&quot; let config2 = URLSessionConfiguration.default let url2 = URL(string: String(format: weatherUrl)) let request2 = URLRequest(url: url2!) let session2 = URLSession(configuration: config2) let task2 = session2.dataTask(with: request2) { (data2, response, error) in let json2 = try! JSON(data: data2!) self.info[&quot;温度&quot;] = json2[&quot;lives&quot;][0][&quot;temperature&quot;] self.info[&quot;湿度&quot;] = json2[&quot;lives&quot;][0][&quot;humidity&quot;] self.info[&quot;风向&quot;] = json2[&quot;lives&quot;][0][&quot;winddirection&quot;] self.info[&quot;风力&quot;] = json2[&quot;lives&quot;][0][&quot;windpower&quot;] self.info[&quot;天气&quot;] = json2[&quot;lives&quot;][0][&quot;weather&quot;] } task2.resume()}}task1.resume()var background = [UIImage]() for i in 1 ... 4 { background.append(UIImage(named: &quot;bg\\(i)&quot;)!) }let imageView = UIImageView()imageView.animationImages = backgroundimageView.animationDuration = 5imageView.animationRepeatCount = 0imageView.startAnimating()self.view.addSubview(imageView) imageView.snp.makeConstraints {(bg) in bg.top.bottom.left.right.equalTo(0) bg.center.equalToSuperview()} timer配置（打字机） 1234567891011121314151617181920212223242526272829303132333435363738394041let humidity = info[&quot;湿度&quot;]?.string let temperature = info[&quot;温度&quot;]?.string let winddirection = info[&quot;风向&quot;]?.string let weather = info[&quot;天气&quot;]?.string let windpower = info[&quot;风力&quot;]?.string let weatherString = &quot;\\(nowDistrict)现在的天气是:\\n温度:\\(temperature!)℃！\\n湿度:\\(humidity!)%！\\n天气状况:\\(weather!)！\\n风力:\\(windpower!)！\\n风向:\\(winddirection!)！\\n报告完毕！&quot; weatherInfo.backgroundColor = UIColor.clear self.view.addSubview(weatherInfo) weatherInfo.textColor = UIColor.white weatherInfo.lineBreakMode = NSLineBreakMode.byWordWrapping weatherInfo.numberOfLines = 0 weatherInfo.snp.makeConstraints {(weatherInfo) in weatherInfo.center.equalToSuperview() } if warning == 1{ weatherInfo.removeFromSuperview() } if i==13 { preTextLabel.text = &quot;&quot; if times &lt;= weatherString.count{ let output = weatherString.prefix(times) let paraph = NSMutableParagraphStyle() paraph.lineSpacing = 10 let attributes = [NSAttributedString.Key.font: UIFont(name: &quot;Zpix&quot;, size: 22),NSAttributedString.Key.paragraphStyle: paraph] weatherInfo.attributedText = NSAttributedString(string: String(output), attributes: attributes as [NSAttributedString.Key : Any]) times+=1 } else { timer2.invalidate() let Return = UIButton(type: UIButton.ButtonType.roundedRect) let returnImage = UIImage(named: &quot;return&quot;) Return.setBackgroundImage(returnImage, for: .normal) Return.addTarget(self, action: #selector(self.returnHome(_:)), for: UIControl.Event.touchUpInside) self.view.addSubview(Return) Return.snp.makeConstraints {(button) in button.centerX.equalTo(weatherInfo).offset(100) button.centerY.equalTo(weatherInfo).offset(120) } } } 返回首页 123@objc func returnHome(_ button: UIButton) { self.dismiss(animated: true, completion: nil)} 原文件","link":"/iOS/Weather/"},{"title":"My Planet-MusicViewController","text":"Music页主要实现功能： 在线播放流媒体 简单交互 RemoteController交互 返回首页 全局部分 引入： UIKit SnapKit AVFoundation（音频处理） MediaPlayer（音频处理） 开源StreamingKit流媒体处理包（swift与oc混编）文件下载 1234import UIKitimport SnapKitimport AVFoundationimport MediaPlayer 枚举播放器状态 1234enum state { case playing case notPlaying} UIViewController类 变量、常量声明： 随机数（用于确定随机播放在线音乐） timer STKAudioPlayer播放器 已播放时长 总时长 缓存状态 1234567var randomNumber = Int(arc4random()%5)+1var timer:Timer!var bgm:Timer!let audioPlayer = STKAudioPlayer()var duration = 0.0var progess = 0.0var bufferingStatus = 2 audioPlayer代理 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647func audioPlayer(_ audioPlayer: STKAudioPlayer, didStartPlayingQueueItemId queueItemId: NSObject) { }func audioPlayer(_ audioPlayer: STKAudioPlayer, didFinishBufferingSourceWithQueueItemId queueItemId: NSObject) { var NumC:Int NumC = randomNumber randomNumber = Int(arc4random()%5)+1 while true { if NumC == randomNumber { randomNumber = Int(arc4random()%5)+1 } else { break } } bufferingStatus = 2}func audioPlayer(_ audioPlayer: STKAudioPlayer, stateChanged state: STKAudioPlayerState, previousState: STKAudioPlayerState) { }func audioPlayer(_ audioPlayer: STKAudioPlayer, didFinishPlayingQueueItemId queueItemId: NSObject, with stopReason: STKAudioPlayerStopReason, andProgress progress: Double, andDuration duration: Double) { if bufferingStatus != 2 { var NumC:Int NumC = randomNumber randomNumber = Int(arc4random()%5)+1 while true { if NumC == randomNumber { randomNumber = Int(arc4random()%5)+1 } else { break } } bufferingStatus = 2 } audioPlayer.stop() bgm = Timer.scheduledTimer(timeInterval: 0.3, target: self, selector: #selector(self.bgm(_:)), userInfo: nil, repeats: true) audioPlayer.unmute() audioPlayer.play(&quot;http://47.115.141.93/songs/\\(randomNumber).mp3&quot;)}func audioPlayer(_ audioPlayer: STKAudioPlayer, unexpectedError errorCode: STKAudioPlayerErrorCode) { print(errorCode)} 增加timer事件 1234567891011121314@objc func tick(_ timer:Timer) { duration = audioPlayer.duration progess = audioPlayer.progress if audioPlayer.state != STKAudioPlayerState.buffering { self.bufferingStatus = 0 }}@objc func bgm(_ timer:Timer) { if bufferingStatus == 0 { setLockScreenDisplay() bgm.invalidate() }} 复写viewDidLoad： 配置timer 配置audioPlayer 生效闭包 12345678910timer = Timer.scheduledTimer(timeInterval: 0.35, target: self, selector: #selector(self.tick(_:)), userInfo: nil, repeats: true)bgm = Timer.scheduledTimer(timeInterval: 0.3, target: self, selector: #selector(self.bgm(_:)), userInfo: nil, repeats: true)audioPlayer.play(&quot;http://47.115.141.93/songs/\\(randomNumber).mp3&quot;)audioPlayer.delegate = selfbackground()backgroundMusic()creatRemoteCommandCenter() 复写viewWillAppear 12becomeFirstResponder() UIApplication.shared.beginReceivingRemoteControlEvents() 复写viewWillDisappear 12resignFirstResponder() UIApplication.shared.endReceivingRemoteControlEvents() RemoteCenter配置 12345678910111213141516171819202122232425func creatRemoteCommandCenter() { let commandCenter = MPRemoteCommandCenter.shared() commandCenter.playCommand.addTarget { [] event in self.resumeAndPauseWhtherPause(false) return .success } commandCenter.pauseCommand.addTarget { [] event in self.resumeAndPauseWhtherPause(true) return .success } commandCenter.nextTrackCommand.addTarget { [] event in self.next() return .success } commandCenter.previousTrackCommand.addTarget { [] event in self.next() return .success } commandCenter.changePlaybackPositionCommand.addTarget{ [] event in let playbackPositionEvent = event as? MPChangePlaybackPositionCommandEvent self.audioPlayer.seek(toTime: playbackPositionEvent!.positionTime) return .success } } 配置播放下一首歌闭包 12345678910111213141516171819202122232425262728293031323334func next() { var info = MPNowPlayingInfoCenter.default().nowPlayingInfo audioPlayer.mute() audioPlayer.pause() var NumC:Int NumC = randomNumber randomNumber = Int(arc4random()%5)+1 while true { if NumC == randomNumber { randomNumber = Int(arc4random()%5)+1 } else { break } } bufferingStatus = 2 audioPlayer.seek(toTime: duration-0.001) info![MPNowPlayingInfoPropertyElapsedPlaybackTime] = audioPlayer.progress audioPlayer.resume()}func resumeAndPauseWhtherPause(_ status: Bool) { var info = MPNowPlayingInfoCenter.default().nowPlayingInfo if status { audioPlayer.pause() info![MPNowPlayingInfoPropertyPlaybackRate] = 0.00001 info![MPNowPlayingInfoPropertyElapsedPlaybackTime] = audioPlayer.progress }else { audioPlayer.resume() info![MPNowPlayingInfoPropertyPlaybackRate] = 1.0 info![MPNowPlayingInfoPropertyElapsedPlaybackTime] = audioPlayer.progress } MPNowPlayingInfoCenter.default().nowPlayingInfo = info} 设置锁屏RemoteController 1234567func setLockScreenDisplay() { var info = Dictionary&lt;String, Any&gt;() info[MPMediaItemPropertyTitle] = randomNumber info[MPMediaItemPropertyPlaybackDuration] = TimeInterval(duration) info[MPNowPlayingInfoPropertyPlaybackRate] = 1.0 MPNowPlayingInfoCenter.default().nowPlayingInfo = info } 设置背景音乐闭包 123456func backgroundMusic() { let session = AVAudioSession.sharedInstance() try? session.setCategory(AVAudioSession.Category.playback) print(AVAudioSession.Category.playback) try? session.setActive(true) } 原文件","link":"/iOS/Music/"},{"title":"MyPlanet","text":"记录一下第一个较完整的swift App 其实还是因为在家上网课太无聊。 好的我要被枪决了 Github：https://github.com/SaitoYayoi/My_Planet 原文件： MD5：24548214ff88c65757181803ada7936f SHA-1：d704a0b51f44070cf7fa0a4ca6ebcc1f1e79a26f SHA-256：16c90796c873f0884dfb006be82614ed56e1dd91db0962f2c0d0cf43a5113131 分类汇编：首页、Mail页、Music页、Weather页、Fate页 特别鸣谢：@Taglee","link":"/iOS/MyPlanet/"},{"title":"历史考试前恐怖的回忆）","text":"历史我还有救！ 新航路开辟 根本原因：地中海沿岸城市出现资本主义萌芽 西欧各国渴求金银财富 共同基础：生产力发展 时间：15-16c 葡萄牙 迪亚士：绕过好望角 西班牙 哥伦布：美洲新大陆 葡萄牙 达伽马：第一个到达印度 西班牙 麦哲伦：环球航行 意义：全球航路大通，联系成紧密整体 影响：人口迁移 物种交换 美洲是全球族群混合程度最高地区 世界市场开始形成 *三角贸易：葡萄牙占据澳门、西班牙占据菲律宾马尼拉 文艺复兴 时间：14-17c 内核：人文主义 根本原因：中世纪晚期资本主义生产关系的萌芽 中心与起源地：意大利 文学三杰：但丁《神曲》彼得拉克《歌集》薄伽丘《十日谈》 宗教改革 根本原因：资本主义发展需要 开始：德国 马丁路德 启蒙运动 时间：17-18c 理性和科学 中心：法国 代表人物：伏尔泰 君主立宪制；孟德斯鸠 三权分立相互制衡；卢梭 天赋人权主权在民直接民主制 资本主义革命 all根本原因：资本主义经济发展 英国革命：1640-1688 1688:光荣革命 1689:权利法案 1701:王位继承法 美国独立战争：1775-1783 1775:莱克星顿的枪声 1776.7.4:独立宣言 1783:英国承认美国独立 不仅是资产阶级独立还是民族独立战争 法国革命：1789-1815 1789:人权宣言 1799-1815:拿破仑时代 《法国民法典》 俄国废除农奴制改革 1861改革 美国南北战争 时间：1861-1865 日本明治维新 富国强兵 殖产兴业 文明开化 工业革命 第一次：18c60年代-19c40年代 蒸汽时代 英国 【第一个发明：珍妮纺纱机】瓦特蒸汽机 原因：多因一果 必然性：要提高生产力 第二次：19c70年代-20c初 电气时代 美国德国 理论基础：法拉第 电磁学理论 影响：导致人类文明形态从农业文明到工业文明；资本主义世界经济体系最终形成 殖民体系开始：新航路开辟 二工掀起了瓜分世界的狂潮 资本主义世界殖民体系形成 一战 原因：不公正性 不平衡性（根本原因）不稳定性（直接原因） 巴尔干半岛 欧洲的火药桶 最主要矛盾：英德争夺世界霸权 欧洲大陆最主要矛盾：法德 同盟国：德意奥匈帝国 协约国：英法俄 导火线：萨拉热窝事件1914.6.28 时间：1914.7.28-1918.11.11 西线：英法对德 决定性战场 马恩河战争：德“速决战”计划破产 凡尔登绞肉机 索姆河战役：英国第一次使用坦克 1917.11 俄国十月革命 胜利之后推出一战 美国1917加入协约国 中国以工代战 一战是非正义战争 除塞尔维亚是民族自卫战 影响：动摇了欧洲的世界优势地位 一战后的国际秩序：凡尔赛-华盛顿体系 体现了帝国主义的强权政治 第一次世界性国际性组织 “全体一致”原则 特别鸣谢：🍉、zh","link":"/Study/history/"},{"title":"令人心里一动的美好词汇","text":"永远相信美好的事情即将发生！！！！！！！！ 永远相信美好的事情即将发生！！！！！！！！ 永远相信美好的事情即将发生！！！！！！！！ Flipped : 只是听到就怦然心动了 Fairy : 美丽可爱的小精灵 小仙女 漂亮女孩 Kilig : 形容那种喜欢一个人喜欢得好像胃里正有成千上万只蝴蝶翩翩 一张嘴就要全部飞出来一样的醉醺醺 麻酥酥感 Redamancy : 你爱着某人时 某人也在爱着你 Sobremesa : 餐后与老友畅谈的时光 Sinsoledad : 发现幸福掌握在你自己手中 Flechazo : 一见钟情 Solitude : 平静愉悦的独处 Sokäch : 周日的幸福感 Echo : 念念不忘 必有回响 Tiám : 初遇某人时眼里闪烁的光芒 Serendipity : 不期而遇的美好 Palpitate : 小心翼翼却又急切的心动 Shmily : 看我是多么地爱你 Amireux : 友达以上 恋人未满 Aurora : 极光 Milchstraße : 银河 Eternity : 永恒 Chaos ：混沌 Gänseblümchen : 雏菊 Dreamboat :理想的爱人 理想的目标 Vergissmeinnicht : 勿忘我 Frühlingserwachen : 立春 春天苏醒 Famiglistimo : 爱的人都在你的身边 Wabi-sabi : 在不完美之中寻找美好 接受人生的生死轮回和残缺之美 Miscedence : 你的存在对他人来说很重要 Ethereal : 你望那个星星般的人时的内心感受 Crush :短暂地 热恋地 但又羞涩的爱恋 Petrichor : 刚下过雨之后泥土的味道 Komorebi : 阳光穿过了树叶之间的缝隙 Serein : 身处落雨的黄昏 Arrebol : 灿烂云霞 Murmure : 那种不知名的小溪潺潺的声音 那种微风吹着树叶沙沙的声音 l’ivresse: 酒后伴着微醺 体味那种特有的沉醉和快乐 Augenstern : 喜欢的人眼中的星星 Gezelligheid : 惬意 舒适 跟爱人在一起的温暖 老友的阔别重逢 冬天壁炉升起的烟火 Trouvaille : 因生活中偶然发现的美好小事物而产生的满足 Hygge : 没有令人烦恼的东西 从身边温和和治愈的事物中获取快乐 Miraitowa : 永远期待着明亮未来 Gnomeshgh : 某人愿意在第一时间与你分享有趣的事 Ephémère : 朝生暮死的 昙花一现的 转瞬即逝的 我偏要夹带私货——","link":"/%E6%96%87%E7%B4%A0/YasashiiKotoba/"},{"title":"码一点去过的地方","text":"🇹🇭🇮🇩🇸🇬🇲🇾🇰🇷🇩🇪🇨🇿🇦🇹🇭🇺🇸🇬🇹🇭🇯🇵🇳🇱🇧🇪🇱🇺🇫🇷🇯🇵🇰🇷 2020.8.10-2020.8.13 真正意义上的奶茶自由— 2020.7.16-2020.7.28 青海甘肃和那一点点的地方啦…. 2020.2.1-2020.2.10 日本 北海道 韩国 首尔 2019.7.27-2019.8.8 欧洲 荷兰 比利时 卢森堡 法国 2019.1.24-2019.1.30 中国 广西 南宁 北海 涠洲岛 2018.7.2-2018.7.9 日本 东京 小田原 京都 大阪 2018.2.29-2018.3.2 云南 岘港 中转香港 2017.7.3-2017.7.14 中国 重庆 四川成都 第一次坐卧铺火车✓ 2017.1.18-2017.1.26 中国 云南 昆明 大理 丽江 2016.7.31-2016.8.5 泰国 清迈自驾曼谷 2015.8.9-2015.8.17 新加坡 新加坡 2015.7.14-2015.7.25 欧洲 德国 捷克 奥地利 匈牙利 中转俄罗斯莫斯科 危险的俄航 2015.2.11-2015.2.16 韩国 首尔 2015.2.1-2015.2.9 台湾 台北 高雄 花莲 2014.6.29-2014.7.6 台湾 台北 高雄 垦丁 2014.1.25-2014.1.29 中国 广州 深圳口岸 香港 澳门 2013.7.27-2013.8.4 印度尼西亚 巴厘岛 登巴萨 2012 泰国 普吉岛 误机 ？？？？新加坡 马来西亚 兰卡威 吉隆坡","link":"/Outgoing/journey/"},{"title":"码一下第一次写了篇完整的教程贴还被大佬翻牌子了","text":"其实我只是第一次发帖的萌新来源：大神糖醋丶炒排骨的帖子： https://bbs.feng.com/read-htm-tid-12032331.html 插件在仙里仙气的帖子： https://bbs.feng.com/read-htm-tid-12032977.html 插件还可见： https://bbs.feng.com/read-htm-tid-12033683.html 由于帖子一直会被审核，所以不定期更新 准备工作：手机即可，有电脑最好1、rootlessJB3 2、FilzaEscaped12.x（比GeoFilza更稳定）Filza作者融合了Filza和RootlessJB，下载地址： https://github.com/tigisoftware/ … rootlessJB3.0.0.ipa 原贴见： https://bbs.feng.com/read-htm-tid-12033932.html 手机端安装：Safari打开 https://app.ignition.fun ，点击下方从左起第二个按钮，在Jailbreaks中找到rootlessJB3，在Utilities中找到FilzaEscaped12.x点击GET，等待下载，随后再到设置中去信任，这里较简单。 越狱：打开rootlessJB，点击jailbreak，等待，会自动注销 如果过程中设备重启，则重新进行该步骤安装插件：可以使用RootlessInstaller更方便的安装插件，缺点是只支持deb包安装，现在资源较少，安装方法请自行在论坛搜索，一大把。这也是最难的一部分，许多封釉不会替换鸭 这里说一下，这次的越狱很特殊，插件不再是以前熟悉的deb结尾的文件了，而是一个压缩包，里面很多文件夹，需要我们自行去替换，因此很多插件需要patch后才能用，patch需要mac或linux电脑才行，所以大家只需要大神patch好后拿来用就行了，patch教程在文末 首先，我们解压需要安装的插件「Filza貌似没有解压能力，可以现在其他解压软件先解压，再在Filza中打开」，打开文件夹，发现几个目录 插件的目录在/var/LIB/，打开，细心的封釉有木有发现一些相同点 没错，有几个相同的目录，我们要做的，就是要替换进去，举个例子：我们打开插件的MobileSubstrate文件夹，同时打开系统的这个文件夹，发现里面都有一个DynamicLibraries文件夹，那么我们先别急着替换，继续打开，把插件的DynamicLibraries中的所有东西都复制到系统的这个目录下，这个文件夹就搞定了。主题放在/var/LIB/Themes（Themes文件夹自行创建） 其他几个文件夹亦是如此，一般情况下，只有PreferencesBundles中，是要整个文件夹一起复制过去的，其他的都是打开到没有文件夹为止，才开始复制，不是所有插件都有这几个文件夹，有的只要替换TweakInject文件夹，有的要替换很多个，注意分清。 有的插件中打开只有两个文件：**.plist和**.dylib，这时候是直接把这两个文件复制到TweakInject文件夹中即可，这个须知 使插件生效：常规做法：重启，重新激活越狱高级做法「适用于有mac或linux的人」：打开手机WiFi，点击正连接的wifi右边的感叹号查看详细，查看IP地址一栏，记下。在mac或linux中打开终端输入：ssh root@你看到的IP地址（xxx.xxx.xxx.xxx）如果让你输入yes或no，当然输入yes然后让你输密码，默认都是alpine，输入的时候密码不会显示出来，然后回车，成功连接到设备了。输入：inject /var/LIB/MobileSubstrate/DynamicLibraries/插件名.dylib输入：killall SpringBoardwindows可以用putty或者xshell软件，连接ssh来实现上述步骤随后插件生效手机端方法：原贴见 https://bbs.feng.com/read-htm-tid-12033618.html rootlessJB更新后，在越狱时，我们勾选上iSuperSu键，在越狱过后，会发现多出现了一个app叫iSuperSu，点进去，找到ServerAuditor，点击它，点击UnSandBox，去App Store下载Terminus（SSH工具）在配置SSH中：1.打开，创建一个Host2.Alias是名称，随便写3.Hostname写localhost或127.0.0.14.勾选SSH5.username输入root，port默认了不用改6.password输入alpine，默认改不了，原因是etc只读不写7.打开iSuperSu，点击ServerAuditor，弹出窗口后选择Unsandbox8.打开Termius，点击之前创建好的Hosts，连接成功（转自@仙里仙气） 随后与mac/linux方法一样输入命令注销，使插件生效 patch方法写在前面：patch只适合有基础的人来尝试，需要mac/linux电脑，由于我也不是很会，所有我只是把排骨的内容详化了一点，有什么问题还是问排骨大神为准，原贴：bbs.feng.com/read-htm-tid-12032331.html1、安装dpkg在http://www.macports.org/install.php下载适合你的系统的文件，我的是OS10.14我就下载10.14的然后双击打开安装随后打开终端（Terminal）输入sudo port -f install dpkg 随后输入电脑密码（密码不会显示，输入完回车即可），等待。dpkg安装完成2、下载patch文件 [patcherplus](https://feng-bbs-att-1255531212.file.myqcloud.com/2019/02/07/14966610_patcherplus cd patcher文件所在目录chmod +x patcherplus./patcherplus 将deb文件拖入终端的框内（出现绿色加号） 空格 输出目录例子：（这是我的，请勿复制）cd /Users/yayoi/Downloads/chmod +x patcherplus./patcherplus /Users/yayoi/Downloads/com.xxxx.deb .等待patchpatch完成后，生成Library和DEBIAN文件夹，我们要的插件就在Library文件夹内。 betterCCXI.zip callassist1.6.zip 原贴地址：https://www.feng.com/post/12033248 论坛：威锋","link":"/iOS/top-of-the-world/"},{"title":"摸鱼产物","text":"很久很久以前，有一位老师，因为签到很烦，所以她…… 好编不下去了 反正就是一点点的摸鱼产物还送给jsq了（可恶 也是一年的Developer Program里唯一一个可以看的成品（我！没！有！烂！尾！） 大体思路：创建以学号+姓名构成的字典→获取出勤截图→OCR提取文字→将字符串与字典遍历，取出不包含的结果序号→通过字典查找姓名→输出 OCR Api：用了很多个最后觉得还是百度API最好用（指Accurate） 问题： OCR识别精度低 OCR识别时间不好掌握 图片需要裁剪以除去不需要部分 名单能否自定义 解决方案： 没办法 增加AlertController确保字符串不为空后输出 使用开源包处理图片至合适大小 可以但没必要 图片处理方案：PhotoSolution 同时感谢作者耐心解答（第一次遇到会回复的作者还加了微信 泪目 直接手动导入了用的 swift和oc混编真的好难（bushi 我一定要学会oc！！！！！ PhotoSolution 特别鸣谢：xtx女士 以下为正文 全局部分引入: UIKit SwiftyJSON（比较喜欢的JSON解决方案） SnapKit（约束） AudioToolBox.AudioServices 12345import UIKitimport SwiftyJSONimport SnapKitimport AudioToolbox.AudioServicesimport MessageUI 拓展String类：（用于图片编码） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546extension String { //将原始的url编码为合法的url func urlEncoded() -&gt; String { let encodeUrlString = self.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) return encodeUrlString ?? &quot;&quot; } //将编码后的url转换回原始的url func urlDecoded() -&gt; String { return self.removingPercentEncoding ?? &quot;&quot; } var md5:String { let utf8 = cString(using: .utf8) var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH)) CC_MD5(utf8, CC_LONG(utf8!.count - 1), &amp;digest) return digest.reduce(&quot;&quot;) { $0 + String(format:&quot;%02X&quot;, $1) } } static let random_str_characters = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; static func randomStr(len : Int) -&gt; String{ var ranStr = &quot;&quot; for _ in 0..&lt;len { let index = Int(arc4random_uniform(UInt32(random_str_characters.count))) ranStr.append(random_str_characters[random_str_characters.index(random_str_characters.startIndex, offsetBy: index)]) } return ranStr }}extension UIImage { // 截取部分图片 func imageAtRect(rect: CGRect) -&gt; UIImage{ var rect = rect rect.origin.x *= self.scale rect.origin.y *= self.scale rect.size.width *= self.scale rect.size.height *= self.scale let imageRef = self.cgImage!.cropping(to: rect) let image = UIImage(cgImage: imageRef!, scale: self.scale, orientation: self.imageOrientation) return image } } ViewController类1class ViewController: UIViewController, UIImagePickerControllerDelegate &amp; UINavigationControllerDelegate, PhotoSolutionDelegate, MFMailComposeViewControllerDelegate 变量、常量声明： 记录学号+姓名词典 数组（初始值为0），若出席则改为1 出席名单（初始值为nil） timer 运行次数 CGSize UIButton UITextView（输出） 123456789101112131415var list:Dictionary&lt;Int,String&gt; = [1:&quot;**&quot;,2:&quot;**&quot;,3:&quot;**&quot;,4:&quot;**&quot;,5:&quot;**&quot;,6:&quot;**&quot;,7:&quot;**&quot;,8:&quot;**&quot;,9:&quot;**&quot;,10:&quot;**&quot;,11:&quot;**&quot;,12:&quot;**&quot;,13:&quot;**&quot;,14:&quot;**&quot;,15:&quot;**&quot;,16:&quot;**&quot;,17:&quot;**&quot;,18:&quot;**&quot;,19:&quot;**&quot;,20:&quot;**&quot;,21:&quot;**&quot;,22:&quot;**&quot;,23:&quot;**&quot;,24:&quot;**&quot;]var res = [Int](repeatElement(0, count: 24))var resP = &quot;&quot;var imageDic:Dictionary&lt;Int,String&gt; = [1:&quot;nil&quot;]var times = 1var timer:Timer!var runTimes = 1var a = 1var frame:CGSize?@IBOutlet weak var btn: UIButton!//@IBOutlet weak var nvg: UINavigationItem!@IBOutlet weak var text: UITextView!//@IBOutlet weak var seg: UISegmentedControl! 裁剪图片闭包 配置URL会话 123456789101112131415161718192021222324252627282930313233343536373839404142for image in images { var data:Data frame = image.size print(frame!.width) if frame!.width &gt; 850 { let reImage = image.imageAtRect(rect: CGRect(x: 130, y: 200, width: 285, height: 1800)) data = reImage.pngData()! } else { data = image.pngData()! } let base64 = data.base64EncodedString(options: .endLineWithLineFeed) let imageString = base64.addingPercentEncoding(withAllowedCharacters: .alphanumerics) imageDic.updateValue(imageString!, forKey: times) times += 1 } timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(self.http), userInfo: nil, repeats: true) let alertController = UIAlertController(title: &quot;识别中……&quot;, message: nil, preferredStyle: .alert) var ti = 6.0 if times &gt;= 5 { ti = Double(times) * 1.2 } self.present(alertController, animated: true, completion: nil) DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + ti ) { self.dismiss(animated: true, completion: nil) if self.a == self.runTimes { self.row() print(self.result) self.text.textAlignment = .left self.text.text = &quot;原始数据:\\n&quot; + String(Double(self.frame!.width)) + &quot;runtimes:\\(self.runTimes)&quot; + &quot;returntimes:\\(self.a)&quot; + self.result } else { let alertController = UIAlertController(title: &quot;出现了点问题\\n好像丢包了\\n检查一下网络吧&quot;, message: nil, preferredStyle: .alert) self.present(alertController, animated: true, completion: nil) DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 3 ) { exit(0) } } } 确保每张图片遍历 123456789@objc func http(_ sender: Timer) { if runTimes &lt; times { request(imageString: imageDic[runTimes]!) runTimes += 1 } else { timer.invalidate() }} 复写viewDidLoad 设置photoSolution代理 设置约束 1234567891011121314photoSolution.delegate = selfphotoSolutionCustom()btn.snp.makeConstraints {(btn) in btn.center.equalToSuperview() btn.width.equalToSuperview().dividedBy(2) btn.height.equalToSuperview().dividedBy(5)} text.snp.makeConstraints {(text) in text.left.equalTo(self.view.safeAreaLayoutGuide.snp.left) text.right.equalTo(self.view.safeAreaLayoutGuide.snp.right) text.top.equalTo(btn.snp_bottomMargin) text.bottom.equalTo(self.view.safeAreaLayoutGuide.snp.bottom)} 发起URL对话 1234567891011121314151617181920212223242526272829303132let httpUrl = &quot;https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic?access_token=24.e131f610522faa1bed15ae7de5478559.2592000.1595078568.282335-19580757&quot;var request = URLRequest(url: URL(string: httpUrl)!)request.timeoutInterval = 2request.httpMethod = &quot;POST&quot;request.addValue(&quot;application/x-www-form-urlencoded&quot;, forHTTPHeaderField: &quot;Content-Type&quot;)//let httpBody = signStr + &quot;sign=&quot; + signrequest.httpBody = (&quot;image=&quot;+imageString).data(using: .utf8)let session = URLSession.sharedlet dataTask = session.dataTask(with: request, completionHandler: {(data, reponse, error) -&gt; Void in if error != nil { print(error.debugDescription) } else { let json = try!JSON(data: data!) let resArr = json[&quot;words_result&quot;].arrayValue for items in resArr { let resDic = items.dictionaryValue for (_, values) in resDic { self.result += values.stringValue } } self.a += 1 print(self.a) }}) as URLSessionTaskdataTask.resume() 遍历并得出结果 1234567891011121314151617181920for (keys ,values) in list { if self.result.contains(values) { res[keys-1] = 1 }}for (index, items) in res.enumerated() { if items == 0 { resP = resP + list[index+1]! + &quot;\\n&quot; }}print(resP)if resP == &quot;&quot; { resP = &quot;全齐啦！！&quot;}let alertController = UIAlertController(title: &quot;\\(resP)&quot;, message: nil, preferredStyle: .alert)let action = UIAlertAction(title: &quot;知道了&quot;, style: .default, handler: { action in self.dismiss(animated: true, completion: nil)})alertController.addAction(action)self.present(alertController, animated: true, completion: nil)","link":"/iOS/WhoNoCome/"},{"title":"将棋向","text":"####将棋盤（しょうぎばん）【将棋盘】将棋的棋盘9x9=81格,多数情况略作”棋盘” ####駒（こま）【棋子/驹】将棋的棋子译作棋子或驹都可以根据中文语感建议当こま单独作为单字出现的时候，偏向译作“棋子”当駒与其他单字组成固有词语时候，沿用日文原文字“驹” ####自陣（じじん）【自阵】将棋盘上临近自己的三行格子 ####敵陣（てきじん）【敌阵】将棋盘上临近对手的三行格子 ####筋（すじ）【筋】将棋盘上整竖条的格子,从右至左用阿拉伯数字1-9表示1~9筋 ####段（だん）【段】与段位概念相区别,本条专指将棋盘上的段将棋盘上整横条的格子,自先手方视点,从上至下用汉字一-九表示一~九段 ####玉将（ぎょくしょう）【玉将】####王将（おうしょう）【王将】####飛車（ひしゃ）【飞车】####角行（かくぎょう）【角行】####金将（きんしょう）【金将】####銀将（ぎんしょう）【银将】####桂馬（けいま）【桂马】####香車（きょうしゃ）【香车（chē）】####歩兵（ふひょう）【步兵】 各棋子一字简写均为第一个字玉、王、飞、角、金、银、桂、香、步 ####成る（なる）/成駒（なりごま）【成驹】1.将棋中，己方某些棋子到达敌阵或在敌阵移动后，可翻转棋子进行升级，行动轨迹发生改变。2.なりごま亦指升级后的棋子。 ※注意：1.虽然有些资料会将成る称作升级/升变，但本派为直观起见将会一直将上述二词沿用日字译作成驹。2.本词专指将棋的情况下使用。因なりごま在日语中亦可指国际象棋中的升变。 ####生駒（いこま）【生驹】成驹的反义词，翻转棋子变为成驹前的棋子。 ####不成（ならず）【不成】棋子侵入敌阵后可选择成驹，但也可以选择保持原状不翻转棋子，不变的时候称为不成。步兵和香车到达底线后强制成驹，桂马到达倒数两行时强制成驹。 各棋子成驹后译法 ####竜王（りゅうおう）【龙王】####竜馬（りゅうま）【龙马】####成銀（なりぎん）【成银】####成桂（なりけい）【成桂】####成香（なりきょう）【成香】####と金（ときん）【成步】 注：棋谱中单字表示的成驹分别为龙王——竜/龍龙马——馬成银——全成桂——圭成香——杏成步——と 其中成银、成桂、成香在棋谱中也有直接用二字挤在一个格子里的表记方法与单字表示方法使用频率大致相同","link":"/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E5%B0%86%E6%A3%8B%E5%90%91/"}],"tags":[{"name":"一点点码的东西","slug":"一点点码的东西","link":"/tags/%E4%B8%80%E7%82%B9%E7%82%B9%E7%A0%81%E7%9A%84%E4%B8%9C%E8%A5%BF/"},{"name":"随记","slug":"随记","link":"/tags/%E9%9A%8F%E8%AE%B0/"},{"name":"MyPlanet","slug":"MyPlanet","link":"/tags/MyPlanet/"},{"name":"History","slug":"History","link":"/tags/History/"},{"name":"WhoNoCome","slug":"WhoNoCome","link":"/tags/WhoNoCome/"}],"categories":[{"name":"网页","slug":"网页","link":"/categories/%E7%BD%91%E9%A1%B5/"},{"name":"日本語","slug":"日本語","link":"/categories/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"iOS","slug":"iOS","link":"/categories/iOS/"},{"name":"Study","slug":"Study","link":"/categories/Study/"},{"name":"文素","slug":"文素","link":"/categories/%E6%96%87%E7%B4%A0/"},{"name":"Outgoing","slug":"Outgoing","link":"/categories/Outgoing/"}]}